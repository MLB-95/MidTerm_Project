<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20224.22.1117.1841                               -->
<workbook original-version='18.1' source-build='2022.4.0 (20224.22.1117.1841)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AccessibleZoneTabOrder.true...AccessibleZoneTabOrder />
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
    <WorksheetBackgroundTransparency />
    <ZoneBackgroundTransparency />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource caption='Sheet1 (df3)' inline='true' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='df3' name='excel-direct.0dfmg0a1dyyeqk15cx9jc11svdhr'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/migue/Documents/GitHub/IronMiguel/IH_lectures/MidTerm_Project/df3.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.0dfmg0a1dyyeqk15cx9jc11svdhr' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:L10001:no:A1:L10001:0' header='yes' outcome='6'>
            <column datatype='integer' name='F1' ordinal='0' />
            <column datatype='string' name='Country' ordinal='1' />
            <column datatype='string' name='Energy_type' ordinal='2' />
            <column datatype='integer' date-parse-format='yyyy' name='Year' ordinal='3' />
            <column datatype='real' name='Energy_consumption' ordinal='4' />
            <column datatype='real' name='Energy_production' ordinal='5' />
            <column datatype='real' name='GDP' ordinal='6' />
            <column datatype='real' name='Population' ordinal='7' />
            <column datatype='real' name='Energy_intensity_per_capita' ordinal='8' />
            <column datatype='real' name='Energy_intensity_by_GDP' ordinal='9' />
            <column datatype='real' name='CO2_emission' ordinal='10' />
            <column datatype='string' name='Region' ordinal='11' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='excel-direct.0dfmg0a1dyyeqk15cx9jc11svdhr' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:L10001:no:A1:L10001:0' header='yes' outcome='6'>
            <column datatype='integer' name='F1' ordinal='0' />
            <column datatype='string' name='Country' ordinal='1' />
            <column datatype='string' name='Energy_type' ordinal='2' />
            <column datatype='integer' date-parse-format='yyyy' name='Year' ordinal='3' />
            <column datatype='real' name='Energy_consumption' ordinal='4' />
            <column datatype='real' name='Energy_production' ordinal='5' />
            <column datatype='real' name='GDP' ordinal='6' />
            <column datatype='real' name='Population' ordinal='7' />
            <column datatype='real' name='Energy_intensity_per_capita' ordinal='8' />
            <column datatype='real' name='Energy_intensity_by_GDP' ordinal='9' />
            <column datatype='real' name='CO2_emission' ordinal='10' />
            <column datatype='string' name='Region' ordinal='11' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:L10001:no:A1:L10001:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_418B5E1974044438ADF937532E3FD955]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LES_RES_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_418B5E1974044438ADF937532E3FD955]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Energy_type</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Energy_type]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Energy_type</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LES_RES_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_418B5E1974044438ADF937532E3FD955]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Year]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Year</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_418B5E1974044438ADF937532E3FD955]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Energy_consumption</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Energy_consumption]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Energy_consumption</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_418B5E1974044438ADF937532E3FD955]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Energy_production</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Energy_production]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Energy_production</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_418B5E1974044438ADF937532E3FD955]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GDP</remote-name>
            <remote-type>5</remote-type>
            <local-name>[GDP]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>GDP</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_418B5E1974044438ADF937532E3FD955]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Population]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Population</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_418B5E1974044438ADF937532E3FD955]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Energy_intensity_per_capita</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Energy_intensity_per_capita]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Energy_intensity_per_capita</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_418B5E1974044438ADF937532E3FD955]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Energy_intensity_by_GDP</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Energy_intensity_by_GDP]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Energy_intensity_by_GDP</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_418B5E1974044438ADF937532E3FD955]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CO2_emission</remote-name>
            <remote-type>5</remote-type>
            <local-name>[CO2_emission]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>CO2_emission</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_418B5E1974044438ADF937532E3FD955]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Region</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Region]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Region</remote-alias>
            <ordinal>11</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LES_RES_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_418B5E1974044438ADF937532E3FD955]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='CO2 emission' datatype='real' name='[CO2_emission]' role='measure' type='quantitative' />
      <column caption='GDP/per capita' datatype='real' name='[Calculation_965459231175991296]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='GDP/[Population]' />
      </column>
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
        <aliases>
          <alias key='&quot;United Kingdom&quot;' value='UK' />
          <alias key='&quot;United States&quot;' value='USA' />
        </aliases>
      </column>
      <column caption='Energy consumption' datatype='real' name='[Energy_consumption]' role='measure' type='quantitative' />
      <column caption='Energy intensity by GDP' datatype='real' name='[Energy_intensity_by_GDP]' role='measure' type='quantitative' />
      <column caption='Energy intensity per capita' datatype='real' name='[Energy_intensity_per_capita]' role='measure' type='quantitative' />
      <column caption='Energy production' datatype='real' name='[Energy_production]' role='measure' type='quantitative' />
      <column caption='Energy type' datatype='string' name='[Energy_type]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;coal&quot;' value='Coal' />
          <alias key='&quot;natural_gas&quot;' value='Gas' />
          <alias key='&quot;nuclear&quot;' value='Nuclear' />
          <alias key='&quot;petroleum_n_other_liquids&quot;' value='Petroleum' />
          <alias key='&quot;renewables_n_other&quot;' value='Renewables' />
        </aliases>
      </column>
      <column datatype='integer' hidden='true' name='[F1]' role='measure' type='quantitative' />
      <column datatype='string' name='[Region]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;Arab contries&quot;' value='Arab Countries' />
          <alias key='&quot;Canada, USA and territories&quot;' value='USA + Canada' />
          <alias key='&quot;Eastern Europe&quot;' value='East Europe' />
          <alias key='&quot;Western Europe&quot;' value='EU' />
        </aliases>
      </column>
      <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='Sheet1' datatype='table' name='[__tableau_internal_object_id__].[Sheet1_418B5E1974044438ADF937532E3FD955]' role='measure' type='quantitative' />
      <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
      <column-instance column='[Energy_type]' derivation='None' name='[none:Energy_type:nk]' pivot='key' type='nominal' />
      <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
      <column-instance column='[Energy_production]' derivation='Sum' name='[pcto:sum:Energy_production:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[Energy_consumption]' derivation='Sum' name='[sum:Energy_consumption:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Energy_production]' derivation='Sum' name='[sum:Energy_production:qk]' pivot='key' type='quantitative' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Energy_type:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;all_energy_types&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;petroleum_n_other_liquids&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;nuclear&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;natural_gas&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;renewables_n_other&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;coal&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_consumption:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[pcto:sum:Energy_production:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_production:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Country:nk]' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Guadeloupe&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Burma&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;North Korea&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;British Virgin Islands&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Côte d’Ivoire&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Reunion&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;The Bahamas&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Gambia, The&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Macau&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Guam&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Martinique&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Timor-Leste&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Congo-Brazzaville&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Palestinian Territories&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;World&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Cabo Verde&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Northern Mariana Islands&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Saint Vincent/Grenadines&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;American Samoa&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Congo-Kinshasa&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Puerto Rico&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Region:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Africa&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Eastern Europe&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Canada, USA and territories&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;Western Europe&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Oceania&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;World&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Asia&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Latin America&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Arab contries&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;USA and territories&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;España&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Sheet1' id='Sheet1_418B5E1974044438ADF937532E3FD955'>
            <properties context=''>
              <relation connection='excel-direct.0dfmg0a1dyyeqk15cx9jc11svdhr' name='Sheet1' table='[Sheet1$]' type='table'>
                <columns gridOrigin='A1:L10001:no:A1:L10001:0' header='yes' outcome='6'>
                  <column datatype='integer' name='F1' ordinal='0' />
                  <column datatype='string' name='Country' ordinal='1' />
                  <column datatype='string' name='Energy_type' ordinal='2' />
                  <column datatype='integer' date-parse-format='yyyy' name='Year' ordinal='3' />
                  <column datatype='real' name='Energy_consumption' ordinal='4' />
                  <column datatype='real' name='Energy_production' ordinal='5' />
                  <column datatype='real' name='GDP' ordinal='6' />
                  <column datatype='real' name='Population' ordinal='7' />
                  <column datatype='real' name='Energy_intensity_per_capita' ordinal='8' />
                  <column datatype='real' name='Energy_intensity_by_GDP' ordinal='9' />
                  <column datatype='real' name='CO2_emission' ordinal='10' />
                  <column datatype='string' name='Region' ordinal='11' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='CO2 Emissions/GDP'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (df3)' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' />
          </datasources>
          <datasource-dependencies datasource='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx'>
            <column caption='CO2 emission' datatype='real' name='[CO2_emission]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <aliases>
                <alias key='&quot;United Kingdom&quot;' value='UK' />
                <alias key='&quot;United States&quot;' value='USA' />
              </aliases>
            </column>
            <column caption='Energy type' datatype='string' name='[Energy_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;coal&quot;' value='Coal' />
                <alias key='&quot;natural_gas&quot;' value='Gas' />
                <alias key='&quot;nuclear&quot;' value='Nuclear' />
                <alias key='&quot;petroleum_n_other_liquids&quot;' value='Petroleum' />
                <alias key='&quot;renewables_n_other&quot;' value='Renewables' />
              </aliases>
            </column>
            <column datatype='real' name='[GDP]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Energy_type]' derivation='None' name='[none:Energy_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CO2_emission]' derivation='Sum' name='[sum:CO2_emission:qk]' pivot='key' type='quantitative' />
            <column-instance column='[GDP]' derivation='Sum' name='[sum:GDP:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Country:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Country:nk]' member='&quot;China&quot;' />
                <groupfilter function='member' level='[none:Country:nk]' member='&quot;United States&quot;' />
                <groupfilter function='member' level='[none:Country:nk]' member='&quot;World&quot;' />
                <groupfilter function='member' level='[none:Country:nk]' member='%null%' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]'>
            <groupfilter function='member' level='[none:Energy_type:nk]' member='&quot;all_energy_types&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</column>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]</column>
          </slices>
          <aggregation value='false' />
        </view>
        <style />
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:GDP:qk]' />
              <lod column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' />
              <lod column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:CO2_emission:qk]</rows>
        <cols>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:GDP:qk]</cols>
      </table>
      <simple-id uuid='{0F8B9CD3-43F6-4D58-BDCE-91CCB5461DD8}' />
    </worksheet>
    <worksheet name='CO2 emissions/Country'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (df3)' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' />
          </datasources>
          <datasource-dependencies datasource='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx'>
            <column caption='CO2 emission' datatype='real' name='[CO2_emission]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <aliases>
                <alias key='&quot;United Kingdom&quot;' value='UK' />
                <alias key='&quot;United States&quot;' value='USA' />
              </aliases>
            </column>
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[CO2_emission]' derivation='Sum' name='[sum:CO2_emission:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Russia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United States&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]'>
            <groupfilter from='1993' function='range' level='[none:Year:ok]' to='2019' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:CO2_emission:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]</column>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='cell-w' value='114' />
            <format attr='cell-h' value='38' />
            <format attr='cell' value='38' />
            <format attr='cell-q' value='190' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' />
              <lod column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:CO2_emission:qk]</rows>
        <cols>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</cols>
        <pages>
          <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]</column>
        </pages>
      </table>
      <simple-id uuid='{EB0DF92E-F8D2-4597-B292-A6FEBBCA833D}' />
    </worksheet>
    <worksheet name='CO2 emissions/Regions'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (df3)' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' />
          </datasources>
          <datasource-dependencies datasource='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx'>
            <column caption='CO2 emission' datatype='real' name='[CO2_emission]' role='measure' type='quantitative' />
            <column datatype='string' name='[Region]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Arab contries&quot;' value='Arab Countries' />
                <alias key='&quot;Canada, USA and territories&quot;' value='USA + Canada' />
                <alias key='&quot;Eastern Europe&quot;' value='East Europe' />
                <alias key='&quot;Western Europe&quot;' value='EU' />
              </aliases>
            </column>
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[CO2_emission]' derivation='Sum' name='[sum:CO2_emission:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Region:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Region:nk]' member='&quot;World&quot;' />
                <groupfilter function='member' level='[none:Region:nk]' member='%null%' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]'>
            <groupfilter from='1993' function='range' level='[none:Year:ok]' to='2019' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:CO2_emission:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]</column>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='cell-w' value='126' />
            <format attr='cell-h' value='42' />
            <format attr='cell' value='42' />
            <format attr='cell-q' value='210' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:CO2_emission:qk]</rows>
        <cols>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]</cols>
        <pages>
          <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]</column>
        </pages>
      </table>
      <simple-id uuid='{66EED484-8D2D-4FB1-B173-DF2C32DC1CE6}' />
    </worksheet>
    <worksheet name='Consumption per region'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (df3)' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' />
          </datasources>
          <datasource-dependencies datasource='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx'>
            <column caption='Energy consumption' datatype='real' name='[Energy_consumption]' role='measure' type='quantitative' />
            <column datatype='string' name='[Region]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Arab contries&quot;' value='Arab Countries' />
                <alias key='&quot;Canada, USA and territories&quot;' value='USA + Canada' />
                <alias key='&quot;Eastern Europe&quot;' value='East Europe' />
                <alias key='&quot;Western Europe&quot;' value='EU' />
              </aliases>
            </column>
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Energy_consumption]' derivation='Sum' name='[sum:Energy_consumption:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Region:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Region:nk]' member='&quot;World&quot;' />
                <groupfilter function='member' level='[none:Region:nk]' member='%null%' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]' included-values='in-range'>
            <min>1993</min>
            <max>2019</max>
          </filter>
          <slices>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</column>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_consumption:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='stroke-color' id='refline0' value='#000000' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Area' />
            <encodings>
              <color column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_consumption:qk]</rows>
        <cols>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</cols>
      </table>
      <simple-id uuid='{46566CBA-A548-4BBD-83BF-D000F6F8A235}' />
    </worksheet>
    <worksheet name='Energy production per energy type'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (df3)' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' />
          </datasources>
          <datasource-dependencies datasource='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx'>
            <column caption='Energy production' datatype='real' name='[Energy_production]' role='measure' type='quantitative' />
            <column caption='Energy type' datatype='string' name='[Energy_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;coal&quot;' value='Coal' />
                <alias key='&quot;natural_gas&quot;' value='Gas' />
                <alias key='&quot;nuclear&quot;' value='Nuclear' />
                <alias key='&quot;petroleum_n_other_liquids&quot;' value='Petroleum' />
                <alias key='&quot;renewables_n_other&quot;' value='Renewables' />
              </aliases>
            </column>
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Energy_type]' derivation='None' name='[none:Energy_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Energy_production]' derivation='Sum' name='[sum:Energy_production:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Energy_type:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Energy_type:nk]' member='&quot;all_energy_types&quot;' />
                <groupfilter function='member' level='[none:Energy_type:nk]' member='%null%' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]'>
            <groupfilter from='1992' function='range' level='[none:Year:ok]' to='2019' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_production:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]</column>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]</column>
          </slices>
          <aggregation value='false' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='cell-w' value='198' />
            <format attr='cell-h' value='66' />
            <format attr='cell' value='66' />
            <format attr='cell-q' value='330' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_production:qk]</rows>
        <cols>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]</cols>
        <pages>
          <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]</column>
        </pages>
        <page-trail-options enabled='true' trail-effect='none' />
      </table>
      <simple-id uuid='{D5D3E132-0240-4D22-80BC-DBA1AF8AC903}' />
    </worksheet>
    <worksheet name='GDP/Country'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (df3)' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <aliases>
                <alias key='&quot;United Kingdom&quot;' value='UK' />
                <alias key='&quot;United States&quot;' value='USA' />
              </aliases>
            </column>
            <column datatype='real' name='[GDP]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[GDP]' derivation='Sum' name='[sum:GDP:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Country:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Country:nk]' member='&quot;World&quot;' />
                <groupfilter function='member' level='[none:Country:nk]' member='%null%' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]'>
            <groupfilter from='1992' function='range' level='[none:Year:ok]' to='2019' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]</column>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</column>
          </slices>
          <aggregation value='false' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[Longitude (generated)]' field-type='quantitative' max='21605262.055169806' min='-16440096.324135914' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[Latitude (generated)]' field-type='quantitative' max='14178639.511680022' min='-9904175.0048327092' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' center='3564.24' field='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:GDP:qk]' max='7128.34' min='0.14000000000000001' num-steps='4' palette='tableau-map-temperatur' symmetric='false' type='interpolated' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:GDP:qk]' />
              <lod column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' />
              <geometry column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='mark-transparency' value='208' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[Latitude (generated)]</rows>
        <cols>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[Longitude (generated)]</cols>
        <pages>
          <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]</column>
        </pages>
        <page-trail-options enabled='true' />
      </table>
      <simple-id uuid='{32802CA9-DD56-4632-95E7-7579DFA079DA}' />
    </worksheet>
    <worksheet name='GDP/Region'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (df3)' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' />
          </datasources>
          <datasource-dependencies datasource='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx'>
            <column datatype='real' name='[GDP]' role='measure' type='quantitative' />
            <column datatype='string' name='[Region]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Arab contries&quot;' value='Arab Countries' />
                <alias key='&quot;Canada, USA and territories&quot;' value='USA + Canada' />
                <alias key='&quot;Eastern Europe&quot;' value='East Europe' />
                <alias key='&quot;Western Europe&quot;' value='EU' />
              </aliases>
            </column>
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[GDP]' derivation='Sum' name='[sum:GDP:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Region:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Region:nk]' member='&quot;World&quot;' />
                <groupfilter function='member' level='[none:Region:nk]' member='%null%' />
              </groupfilter>
            </groupfilter>
          </filter>
          <manual-sort column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Asia&quot;</bucket>
              <bucket>&quot;Canada, USA and territories&quot;</bucket>
              <bucket>&quot;Western Europe&quot;</bucket>
              <bucket>&quot;Eastern Europe&quot;</bucket>
              <bucket>&quot;Latin America&quot;</bucket>
              <bucket>&quot;Arab contries&quot;</bucket>
              <bucket>&quot;Africa&quot;</bucket>
              <bucket>&quot;Oceania&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]'>
            <groupfilter from='1993' function='range' level='[none:Year:ok]' to='2019' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]</column>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='cell-w' value='114' />
            <format attr='cell-h' value='38' />
            <format attr='cell' value='38' />
            <format attr='cell-q' value='190' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:GDP:qk]</rows>
        <cols>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]</cols>
        <pages>
          <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]</column>
        </pages>
      </table>
      <simple-id uuid='{A0D2ACC4-9D68-45AD-A52D-10C96E3C78EF}' />
    </worksheet>
    <worksheet name='Hoja 10'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (df3)' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx'>
            <column caption='GDP/per capita' datatype='real' name='[Calculation_965459231175991296]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='GDP/[Population]' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <aliases>
                <alias key='&quot;United Kingdom&quot;' value='UK' />
                <alias key='&quot;United States&quot;' value='USA' />
              </aliases>
            </column>
            <column datatype='real' name='[GDP]' role='measure' type='quantitative' />
            <column datatype='real' name='[Population]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_965459231175991296]' derivation='Sum' name='[sum:Calculation_965459231175991296:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Country:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Country:nk]' member='&quot;World&quot;' />
                <groupfilter function='member' level='[none:Country:nk]' member='%null%' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]'>
            <groupfilter from='1993' function='range' level='[none:Year:ok]' to='2019' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Calculation_965459231175991296:qk]' included-values='in-range'>
            <min>0.001598821400674333</min>
            <max>0.51400000000000001</max>
          </filter>
          <slices>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]</column>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</column>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Calculation_965459231175991296:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Calculation_965459231175991296:qk]' palette='red_green_diverging_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Multipolygon' />
            <encodings>
              <color column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Calculation_965459231175991296:qk]' />
              <lod column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' />
              <geometry column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[Latitude (generated)]</rows>
        <cols>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[Longitude (generated)]</cols>
        <pages>
          <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]</column>
        </pages>
      </table>
      <simple-id uuid='{6F62ADF1-FDA3-46D9-BAF2-4EB086DB8B00}' />
    </worksheet>
    <worksheet name='Production per country'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (df3)' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' />
          </datasources>
          <datasource-dependencies datasource='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <aliases>
                <alias key='&quot;United Kingdom&quot;' value='UK' />
                <alias key='&quot;United States&quot;' value='USA' />
              </aliases>
            </column>
            <column caption='Energy production' datatype='real' name='[Energy_production]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Energy_production]' derivation='Sum' name='[sum:Energy_production:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Brazil&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Russia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United States&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]' included-values='in-range'>
            <min>1993</min>
            <max>2019</max>
          </filter>
          <slices>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</column>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' />
              <lod column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_production:qk]</rows>
        <cols>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</cols>
      </table>
      <simple-id uuid='{28387289-F0DF-4C73-9B55-898543AEC5FC}' />
    </worksheet>
    <worksheet name='Production per region'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (df3)' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' />
          </datasources>
          <datasource-dependencies datasource='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx'>
            <column caption='Energy production' datatype='real' name='[Energy_production]' role='measure' type='quantitative' />
            <column datatype='string' name='[Region]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Arab contries&quot;' value='Arab Countries' />
                <alias key='&quot;Canada, USA and territories&quot;' value='USA + Canada' />
                <alias key='&quot;Eastern Europe&quot;' value='East Europe' />
                <alias key='&quot;Western Europe&quot;' value='EU' />
              </aliases>
            </column>
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Energy_production]' derivation='Sum' name='[sum:Energy_production:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Region:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Region:nk]' member='&quot;World&quot;' />
                <groupfilter function='member' level='[none:Region:nk]' member='%null%' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]' included-values='in-range'>
            <min>1993</min>
            <max>2019</max>
          </filter>
          <slices>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]</column>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='cell-w' value='90' />
            <format attr='cell-h' value='30' />
            <format attr='cell' value='30' />
            <format attr='cell-q' value='150' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Area' />
            <encodings>
              <color column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_production:qk]</rows>
        <cols>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</cols>
      </table>
      <simple-id uuid='{2277F14A-7015-419F-A9B4-AA80A9A79243}' />
    </worksheet>
    <worksheet name='Renewable per region'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (df3)' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' />
          </datasources>
          <datasource-dependencies datasource='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx'>
            <column caption='Energy production' datatype='real' name='[Energy_production]' role='measure' type='quantitative' />
            <column caption='Energy type' datatype='string' name='[Energy_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;coal&quot;' value='Coal' />
                <alias key='&quot;natural_gas&quot;' value='Gas' />
                <alias key='&quot;nuclear&quot;' value='Nuclear' />
                <alias key='&quot;petroleum_n_other_liquids&quot;' value='Petroleum' />
                <alias key='&quot;renewables_n_other&quot;' value='Renewables' />
              </aliases>
            </column>
            <column datatype='string' name='[Region]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Arab contries&quot;' value='Arab Countries' />
                <alias key='&quot;Canada, USA and territories&quot;' value='USA + Canada' />
                <alias key='&quot;Eastern Europe&quot;' value='East Europe' />
                <alias key='&quot;Western Europe&quot;' value='EU' />
              </aliases>
            </column>
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Energy_type]' derivation='None' name='[none:Energy_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Energy_production]' derivation='Sum' name='[sum:Energy_production:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]'>
            <groupfilter function='member' level='[none:Energy_type:nk]' member='&quot;renewables_n_other&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Region:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Region:nk]' member='&quot;World&quot;' />
                <groupfilter function='member' level='[none:Region:nk]' member='%null%' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]</column>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Area' />
            <encodings>
              <color column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_production:qk]</rows>
        <cols>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</cols>
      </table>
      <simple-id uuid='{F38DB2FF-4F00-4779-B1F9-846225E7BF67}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='Dashboard 1'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='54875' id='3' name='CO2 emissions/Regions' w='82200' x='900' y='1000' />
        <zone h='23750' id='4' name='CO2 emissions/Regions' pane-specification-id='0' param='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]' type-v2='color' w='14000' x='83600' y='5875' />
        <zone count='1' h='13875' id='5' name='CO2 emissions/Regions' name1='GDP/Region' synchronized='1' type-v2='currpage' w='16000' x='84500' y='42125' />
        <zone h='50625' id='6' name='GDP/Region' w='83600' x='500' y='54875' />
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='750' minheight='750' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='8' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='7' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000'>
                <zone fixed-size='280' h='54875' id='3' is-fixed='true' name='CO2 emissions/Regions' w='82200' x='900' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='23750' id='4' name='CO2 emissions/Regions' pane-specification-id='0' param='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]' type-v2='color' w='14000' x='83600' y='5875'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='50625' id='6' is-fixed='true' name='GDP/Region' w='83600' x='500' y='54875'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone count='1' h='13875' id='5' name='CO2 emissions/Regions' name1='GDP/Region' synchronized='1' type-v2='currpage' w='16000' x='84500' y='42125'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{2C16DFDE-E9F0-4F6A-8782-FE4F5014DEC5}' />
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.25' source-height='37'>
    <window class='worksheet' name='CO2 emissions/Regions'>
      <cards>
        <edge name='left'>
          <strip size='200'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='37'>
            <card type='columns' />
          </strip>
          <strip size='37'>
            <card type='rows' />
          </strip>
          <strip size='37'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='217'>
            <card type='currpage' />
            <card pane-specification-id='0' param='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>1993</bucket>
          </multibucket>
        </current-page>
        <highlight>
          <color-one-way>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{11142978-06C4-4724-AFA3-A95CD90A13E1}' />
    </window>
    <window class='worksheet' name='GDP/Region'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='174'>
            <card type='currpage' />
            <card pane-specification-id='0' param='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>2019</bucket>
          </multibucket>
        </current-page>
        <highlight>
          <color-one-way>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{D6725E58-86E6-488F-A38C-6779C3637A84}' />
    </window>
    <window class='worksheet' name='GDP/Country'>
      <cards>
        <edge name='left'>
          <strip size='200'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='37'>
            <card type='columns' />
          </strip>
          <strip size='37'>
            <card type='rows' />
          </strip>
          <strip size='37'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='217'>
            <card pane-specification-id='1' param='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:GDP:qk]' type='color' />
            <card type='currpage' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>2019</bucket>
          </multibucket>
        </current-page>
        <highlight>
          <color-one-way>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:GDP:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{6F3C1735-6DD1-459B-815B-EA3526CB9C49}' />
    </window>
    <window class='worksheet' name='CO2 emissions/Country'>
      <cards>
        <edge name='left'>
          <strip size='200'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='37'>
            <card type='columns' />
          </strip>
          <strip size='37'>
            <card type='rows' />
          </strip>
          <strip size='37'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='217'>
            <card pane-specification-id='0' param='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' type='color' />
            <card type='currpage' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>2019</bucket>
          </multibucket>
        </current-page>
        <highlight>
          <color-one-way>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{0353DF80-0414-48A7-A5FE-08B6F8068261}' />
    </window>
    <window class='worksheet' name='Production per region'>
      <cards>
        <edge name='left'>
          <strip size='200'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='37'>
            <card type='columns' />
          </strip>
          <strip size='37'>
            <card type='rows' />
          </strip>
          <strip size='37'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='217'>
            <card pane-specification-id='0' param='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{4A320D6F-19DC-4DA0-B355-CB80E65DEA4C}' />
    </window>
    <window class='worksheet' name='Consumption per region'>
      <cards>
        <edge name='left'>
          <strip size='200'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='37'>
            <card type='columns' />
          </strip>
          <strip size='37'>
            <card type='rows' />
          </strip>
          <strip size='37'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='174'>
            <card pane-specification-id='0' param='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{9E37EC6C-0134-4EDB-96AF-949A5DD83E40}' />
    </window>
    <window class='worksheet' name='Energy production per energy type'>
      <cards>
        <edge name='left'>
          <strip size='217'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='37'>
            <card type='columns' />
          </strip>
          <strip size='37'>
            <card type='rows' />
          </strip>
          <strip size='37'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='217'>
            <card looped='1' type='currpage' />
            <card pane-specification-id='0' param='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>1993</bucket>
          </multibucket>
        </current-page>
        <highlight>
          <color-one-way>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_production:qk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{4AFE2931-ADAE-41AD-BE1B-5222FEEA274D}' />
    </window>
    <window class='worksheet' name='Renewable per region'>
      <cards>
        <edge name='left'>
          <strip size='200'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='37'>
            <card type='columns' />
          </strip>
          <strip size='37'>
            <card type='rows' />
          </strip>
          <strip size='37'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='217'>
            <card pane-specification-id='0' param='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{BC171670-06A6-4ECF-9830-D9A8C80DEA3F}' />
    </window>
    <window class='worksheet' name='Production per country'>
      <cards>
        <edge name='left'>
          <strip size='200'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='37'>
            <card type='columns' />
          </strip>
          <strip size='37'>
            <card type='rows' />
          </strip>
          <strip size='37'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='216'>
            <card pane-specification-id='0' param='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C0627554-4543-42A1-A98A-B1A249043E13}' />
    </window>
    <window class='worksheet' name='CO2 Emissions/GDP'>
      <cards>
        <edge name='left'>
          <strip size='200'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='37'>
            <card type='columns' />
          </strip>
          <strip size='37'>
            <card type='rows' />
          </strip>
          <strip size='37'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{D2A92961-D36D-43D3-B236-10B4D86656D2}' />
    </window>
    <window class='worksheet' name='Hoja 10'>
      <cards>
        <edge name='left'>
          <strip size='174'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='174'>
            <card pane-specification-id='0' param='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Calculation_965459231175991296:qk]' type='color' />
            <card type='currpage' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>2019</bucket>
          </multibucket>
        </current-page>
        <highlight>
          <color-one-way>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{A6C3F4D1-1691-4640-9BB7-B70AFBEBD764}' />
    </window>
    <window class='dashboard' maximized='true' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='CO2 emissions/Regions'>
          <current-page>
            <multibucket>
              <bucket>2019</bucket>
            </multibucket>
          </current-page>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='GDP/Region'>
          <current-page>
            <multibucket>
              <bucket>2019</bucket>
            </multibucket>
          </current-page>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{BABE07ED-128D-40B0-8AB6-D7F725472676}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='CO2 Emissions/GDP' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='CO2 emissions/Country' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='CO2 emissions/Regions' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Consumption per region' width='192'>
      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
      YII=
    </thumbnail>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAAYjElEQVR4nO3d+XPb953f8ScuAjxBgATvm6LEU6JE6rA3jp1dO2nsOGk222azk2ln2850
      Zv+A9pf+1s7+CZ2daTOTmR4z2Xq73ciWbVk+ZFmRL4qSeF/gDYK4iPvGF/2BEi0bVESKICjy
      +378IhCg3ngTwAvf6/P9fjTZbDaLECqlPeoGhDhKEgChahIAoWoSAKFq3wpAJhnj3ugovmAU
      AJ/Lwf3xaTIPt5MT0SCjo6OEY8l9PcnGxsYffdzxlMd3k00GGXkwyf2REe6O3ieWzOyhD8e+
      n+e7lEyS8fv3cPmCAMTDfu6PTaE83JWQVVI4Nz2PfmBm4gGurdCBn1ccjp0AZNMxfv/ODXoH
      zpKOh3HM3mdsxc+Ztjp+//b7QJqJKTsDA/28/+61I2x524OvR2jurGVu0c+5/jO8ffVqQZ53
      cnyCzp5+Rm9+QCid5J33PqGrrYZ33vuQdNjNb//H77j+0ScAfPzBe9S0nmbs9nXckXRB+hP7
      o390Y23yS1oHX6JIr6Ompobff36HN3/6MzSAWZMmgp4LQ4ME3WvE0o9yk+XGe9eoqLSQ1Jag
      ca+QbWxhdWyMUwP9zI/P8vNf/5K7o3f5M9MAb386RUudjfOXevn9379NS0cLXX3nuXf3Lg1v
      vM4H165SaaslFIfeqjSfLCm0lUbA2k18Y4ISSy22uibam+twRxXOleoA0BlMFOk1kE3x3rX3
      qbSY0ZbYsOrDrPiSxJ3T9P7w3zBx9x5vvG7j2tV3sdXWEMdIVdrBktJAaWQJa/f32Zj4DEtt
      A3VN7TTXVee8YP3nzpOOh9nYipB1L1DW1EtJeRVKMoy+zMZf/+tf83/feguAcCJDZZmJF4d6
      +HRikR9d6jr0N1TszzdLgO8cDsg5PJCF6dE7fPDFFL/6Fz/dvi/hZn7Zj85gxOd1A3r6Bwdp
      sVbRNXieFks58Yf/XW8spbhIg8ZgQIee8vJiMooGU5Fup1bKUM/Fi5eJB7dXIbp6BrhyeRCf
      y4vZbCaVSmE0GUn4VzGYGwDYWLHz3/7uvzIw/Cck3HaW/QoGYwle9wbTy5v86fdfpK2xlkd/
      TcJtx1Dfx8XLVwh6tle9egbOc3nwDC5vELO5glQqjcloAiDgdTIyMkLs4Re4z7HA//qHa/zi
      V7+i6PEVSI0m58V95cVhPv/iK0bHJtHr9DmPi6O38xY2911iYeQTkukMLpeL4e42Pv16knjY
      TyCrozQb5atJB7/4yWvoHr3XRZVYKk2cGzzHYH/PH32iRDLLxSsvUBxdY94RoOvcRXqaivnD
      3fmHtSwkgg6SiSipbO62ubW2kSuXhvnyzmeMjM5y8cL289W3dPBXv/w5t29+itZcR6VJx+C5
      Afp7zlCuh01/BJfLtVOnyNJA0DFPIhogqy3KeZ7axjYuDZ/nzme3ADBX1TE0NETxw8/vux/+
      gV//1b+kvNiAqeYUUccU0ZAXvbE8p5aiM3Fx+DzBmJbLZ9v+6Osjjobm8SPB6WSMiclpmjvO
      YK0owedysOoK0t93Bp2S5O69cbKAtqiE8wPbH8BY2M/U3BKne3rJREKUVlUR8Xq/9W/A66Wq
      ysri3DRKUQWdrY1srC7iiyr0nunE5/VSVVVFIhpkam6Z3r4+SIRIaEspNyp4AwlK9Bmm55c4
      09vH7Vs3ee3VV4E0bncIm81CJOAloSmhSIkwt7ROT28/Rj1MT47jXLbT84OfY4htP0806GNu
      2UlfXw+JkA9taRVGJUIgoUWfiTC/5KC3vx+jPjeIMxP3CMe3N7h7zw2hifuZWdxgoL+HWNDL
      9PwSAGUWG+31Vian5+g400tFifHQ30yxf5rjNhQi4V9lzltEf2ftU393c22RVacXnamM8/3d
      BehOHDfHLgBC5JMcCBOqJgEQqiYBOE6UJKMjI7h8uUeW3W73ETR0/MnO6eMk6WPDn2Xl1kec
      H+jB6Y/TUl3K0lYKJeJDm4oyteigtcGK0xempqGD1nrLUXf9XJMlwDEze+82iqmaP9y+TSgQ
      4MuxGWprK/FvbfHlvUnOtZRw7f2bVDc2MjFpP+p2n3uyF+g4SYeZWwkSCWxSatITiGsoM6RZ
      D4Zpqa7BWmbcWQKU2RrxuIJ0dTQcddfPtbwGQFEUtFpZqBSS3+PEHYjT1dl21K0cS3kNQCaT
      QafT5aucEIdOvq6FqkkAhKod2m7Q+OQkicmpA9cpffn76G22PHQkRK5DC0BicorAW/9w4DrG
      3h4JgDg0sgokVE0CIFRNAiBUTQIgVE0CIFRNAiBUTQIgVE0CIFRNAiBUTQIgVE0CIFRtXwHY
      8myy7nSjpJOsrG2gpOIkMhCJRA6rPyEO1b4Gw5lKK1idnSMS8FFjMbG0uEhMV47VXE5p6WG1
      KMTh2VcA0okISloho9NTXl7C5mYAZ9BJQ50NRVFQFGXnqtKKouSlQSWjkE7LtfXF4dhXAPz+
      AMbycpptlUwveenqbKFBbybmd6MtrSGbze6cEpmvc4O1Oi16vVy9RRyOfX2ymts6d273masA
      KALKa2ry2pQQhSJ7gYSqSQCEqkkAhKrtGoCrBZpxUYijtmsANjY2JARCFXYNQH19PSBLAnHy
      7bob9M033yx0H0IciSduBH/+6Q3efvttQslCtiNEYT0xAIm0wsDAACa51q04wZ4YAO/GMv/4
      9nUyMnuAOMGeOBSiqukUPZ3gT0GdDMURJ9QTP9pdbc24I1BXXMh2hCisXQMwPT3F2sIUwQS0
      d56iwljotoQojF23Abq7e6iurcbnWCeRn2H9QjyXnrwRvOnj9LkhyuTbX5xgTwyARhtndXYG
      X6yQ7QhRWE/cCO44PczglWrMcq6vOMGeuhH86ht/vrMR7FhdYtnhocFmJhgMUGU1kzRUkU7G
      OdUq89GK42fXAHR39zB5/2sqqurRab65v6SkmGpbDelsmoH+TqbGlpj3efhnP7giJ8WLY+mJ
      q0BFRUU592XQ09VRi9flwh9I0djZRlN3KT6fn9pqi5wUL46dJ36yNEqSrUCYx7/Hq6q2T4Sv
      +s5J8OXFuWER4jh44td03O+gqaGJkKx9iBPsiQHo6B3C6QtSI0MhxAm26ypQwOukpuMC/YN6
      UmnQGwrdlhCFsWsAxqdmiQf9hOotGNtfor2y0G0JURi7rgK1NLfygx+/wbrDRaUMhRAn2K5L
      AJ9rlZHRUdJpHSbZwSNOsF2XAJFYggsXL2Er0xGTvUDiBNs1AH0D5/C7nTR0ncUsq0DiBNs1
      AJPTMwwMXkAXWsMdLXRLQhTOrgHo7Wrj3XfewZEso66k0C0JUTi7bgSbqxt5/Y3GQvciRMHJ
      1aGFqkkAhKpJAISqHduB9v/xvYNfubrDWsW/v/RiHroRx5UsAYSq7SsA2UyKYDgqM8WLE2Nf
      q0ButwdfMIguCzaZKV6cAPsKQE1dPYFQEO0JmSk+m83KCfcqt68AOFaXiETitLU2nYiZ4jUa
      jZxwr3L7evcbmttoaN6+XWmRmeLF8Sd7gYSqSQCEqkkAhKpJAISqyS6QI/Cf3/9PB67Ram3n
      X138t3noRt0kALvYWJhmwz594DpdQ9+j3Fqdc//U5viBa4v8kADsYsM+zegH/+/Adeo7uncN
      gHh+yDaAUDUJgFA1WQUSe5aNB8m4Zw5cR1vRgNb8fJxzLgEQe5ZxzxB7668PXKfoyt9gfOFv
      8tDRwUkATpjg1H8gHRo7cB3rpXfz0M3zT7YBhKpJAISqPdMq0Kp9Dr9MkyryzO7YIhJPHbjO
      QMfeh+c/UwCSWV3ONKlCHNRv3hllfNF14Dr/9Ld/uefffaYAmEuKGJtcpaWljpquKlZX1+lo
      bXqWUkIUhMfu5PZvrufc/0wBqK5vorr+mw98VZl8+MXxpMk+Oov9gBRFIZPJ5O1c4Cc9x2HV
      P8zah13/uNY+7Pp7qZ23AMD2VRY0Gk2+yhW0vvRe+NqHXX8vtfMavb38IWMjXxHPfPNzJLz3
      i2rtVn9tdRWA1bVlJh48YHnNSSa2xd2x+Z3fiUafPsvHXt+EiQej2JfXWV1bA1KsrTr33PvS
      wiwzMzMkMt9+LBnyEEpu354au8/C0uqeaj5e+7u2+/uG1+slFQ/nPPfc2Aj++HfufEpt++Qo
      nkju3hrn5jevhX1umoWltZzf2Uv9RzbW7KxtePA411lzugGIRiLs9YI7u9VOxwLcH5tgZn4R
      KPSR4EyM4ooK1lc3cC5N0NZ7geiWl3R8ixVfmh/9YP/X6YzFYgBEY3F4+NKsrHspL97+ye92
      cu/BBIPDl7Gayw78J8TjCUotGqKxKJAlFovv+f8m4gnQm4gHXFz/5CbdAxdY2XTTYdHh1sa4
      1NNMPB7HWKFlZm4OYxbiWgWDvoSo30WSIkqLIBaJUVJRxszUFMPff50Ga+5s5tFYDEhz8/oH
      lNqaCPjcdDXWYjCXsuxKUlVhoqu9EU1xBZ71VSo72/b4V2RRisrwb6yyGQtgqWlk7v4IFU1d
      ZEKbOF1bDA6cIZ3Vcbqticmxe0SSMDQ0uO9v20hcAfxseF00tLbyh5u3Kamuos5sZCuUobJc
      w2efT/Czv/gpe53LcXVlk57+PpbmZpifmSjsgbD15TUSCgSDPhqbGnE6t78xookM5cXPNh1l
      cZGWyclJDKYSDAYjXq+XYHCLTDzIyoYfq62Oc4ODWM1lpOJh4vE4oWjiQH+HomQxZNNMTkxR
      Yrbs93/jdHk53dlMXFtMhTaOptSK9rHvtWxWIZOIsuLYRGsw0dnW/NhjWTRaHVqdga7ufipL
      d5/F3LvpYGPZjt7ShF6vw2r+5tJ9rZ2nMWiz+NaXCSUU/MEgoVCIUCj01O5DrlX80TS+QJDS
      Ciu1paC3NKHJJNFoNOh0WkBLIhr81hIgEgoRDYdI7fHrW0mGcHv8uN0+Siw2GutsNLZ2UFyk
      AzRoNODZCtFcZSG5t5IA1NgqGB+fIBJPo9Fo8rsNIA6f07lJXV3tUbdxYkgAhKrJWCChahIA
      oWoSAKFqEgChahIAoWo7B8Jc60ssb3hQ0HNxeJCRO7fQGEwUlVo423MKh30SuzuGLpOk7/ww
      FcUGJr64icHWxNqai1IDdPSexWb+41PF3L07woULQ/vrMpvhwegosWSKju6zVJcb+PLLEQyl
      Zi6c7YWswu2PbnDu5R9SpoeFmXHc3iBd/eepqsg9SCTEI1qAdMTFFxNrXBweZuhcHwArDhfD
      wxepZIs7Y4tsLE7SeGaIK5cv8PGNGwBshFJUxJ0Yq9u5fOUyd25+BIBzbQn7igMAJZNk7P49
      VhybALS2tgHgWl9m1r4CbB+md60vs7C8vmuT0aCftp5zXL5yhduf3OCzD69z6txFrIqX0UUv
      dz+/xdzcAuE0JHyL2H1w5YXL3Lzx/iG9bOKk0AIsTdyjve8CXucan3782beOrLX0DLO5cH/n
      54DHSXG5hVTIib7smwMy4YAbrbEM59w9lvyg8S8yOr/JtatXaTvTy8jntwH4/PMvcM7fZ9ad
      xGqIc+urcW5/coOUvpTFe18T3qXJEnMVFSYt16++RVv3IN5omqoSPW1nOlmenefCCy/T1bx9
      FpBWbyQaDJBJp/EHAvl/xcSJogWotFoIBgJU1TVhTMV4fHRLNhVGZzQDMHF/BGcIXnvlCiMj
      4wwP9QMwNzXK3/3md7z26ivY55aJxbz4ElqM2SQaQzHlpiKMRuNOzcW5dXrPdlHdfJqgawW9
      qYzG2mqK9QYezdg1PzXGzMMlBEqS//nb39L3wo8Y7G5Fp9ORBZKRCMXlFd/6gwwVDbw81MH4
      9AKVlspDedHEyaEHqD41xOi1d/giUo8rFGMQiAQ8fD3yNVsuN997+VXsd/6JvnNDtFcCZAmn
      ocygIQx09Zznl68N87v//fe8/mcXuXV3jvI6K1ZLBZu6DF98PYLD7dt50rOXBvj4+odYS6Ct
      +zzL03dzGjvVM7Bze/HeLdIVzTiX54iFa7k8cIr3P7pFOuTl5R//FPvMBHOLK0RHRyg+O8Da
      2hqxaJyWzt5DfvnEcfdMQyGC65NMB8xc6n361b2cGxvU1FRz9dp1fvbmG8/UpBCH5ZkCsGy3
      09jegX4PQ+iDPhfzS+uc7u2nzLT7yEUhjooMhhOqJgfChKpJAISqSQCOIb9zmU9ufcbSujvn
      sdnJyZ1dyeLpZBvgGFq6d4eguZHliUmsFcVoTOUQ9+MLZ6ixlFNaYcLp9FBeWkw4nqS68RRn
      u5qfXliFZAlwLCl8+v67WGpqGB2bwmTS4fEnIBVhy+fDvrJOW30Fs3Mr1Dc24PZ4j7rh55Ys
      AY6hWCiAUlRC0OeBdJyktoTVqS+ZdET5xRuvUlZqwr68QXN9FRq9kWQqg8VcftRtP5fyHoDD
      vpKY2N2jt/EwL2J1EuX9ukCyQDka8sF/NvJVLVTtUK8MlwmHSS0tHbiOvrYWvc128IaE+I5D
      DUBqeQXXf/nbA9cx/+UvMf/zn+WhIyG+TVaBhKrteQngWF3C6Q3RWGNm0+2juaWZlVUHtrom
      tEqcaDRGe3v7YfYqRN7tOQDl5WUsrrsJxUoY6G3l488WeOmVIVbsi6wvPODU8A/JZrMoirKz
      JyiTefJlt/dDURTSaTnAL/JvzwHwb/kxZLNoNApj4wuc6qxlfGycSouN1jNn8TmWqLf0oNVq
      0el0AKQf/ntQWq0WvV7m9Bb5t+dPVXP7KZq/s4bT0iLjS8TxJhvBQtUkAELVJABC1SQAQtUk
      AELVJABC1SQAQtX2fBxgY20ZXzhJrbUU71aI5uYmFu2L1Ld0QjpGIpGgrq7uMHsVIu/2HICa
      uga8U7NEIpBJp1lfddDZ28ea3c7m2hwtPZdlKIQ4dvYcgNnpCeqbO9FlU5QV+VjajON2uVE0
      Ouoamgn5fWhqKmUohDhW9vypstlqiYbD1Noq8SbNXDjficftoqG9lUw6hZKnb3shCmnPAaiu
      rd+5XV+7Pe2QrWZ7ggxdUVGe2xKiMGQvkFA1CYBQNQmAUDUJgFA1CYBQNQmAULV9DIVYwhtK
      0lRjZm3DS2dnKwsLduqbOyAdJ5FIUF9f//RCQjxH9jcUYmsO91aY3q5abn0xw+Xvnd8eCrEy
      S0v/CzIUQhw7ew7A1PgYtqYOwlsuHA43tuoyNhwOFK2B+uZWgj4PTTazDIUQx8qeP1VNLa0k
      0hnaOzvxByI0tlXg39rC3Gghk06jKMph9inEodhzACqt1Tu3rRYzABarFQCtQeb/FcdTzl6g
      lbkJ3r3xKRm5zr9QgZwALDucNBdHub+wSVqREIiTLScAddWVjMyuszx1l6SMcBYnXE4APF4/
      f/LKq1iKICULAHHC5WwExyJBHoyOkAx5iCTALEP9xQmWE4C+Cy+SiQeZXHBiKz2KloQonJxV
      oKUlO1m9ibaKLK7oN/fHIkE8vgAhv5eZmRliiSQLc7NEE2nC4RBbW1syQ6Q4dnKWAO2NNXw5
      ep+iUiuvPrYESKYyeD0u9Nk0Gq0Jr2OV6qZW1laXifk3Katpp7KSneEQAEo2PwfHHq8pRD7l
      BKCmqZOfNHXm/KK50oLL5aKxpQMl6uLu7BZ9tQpkNWi0GpRM7gdUZq4Vz7t9zRGWTGWIxWN4
      tjJcudTPyuIiza3tZJI1pNMpYHvC5kczxWs0+Rlt/XhNIfJpzwFoaG6j4eFti2V7CETHqa7t
      O4rK8t2XEAUhX6tC1Y71GOMPF2a5s7J04Dr/bvgKdeUVB29IHDvHOgCJdJpQInHgOjLwT71k
      FUiomgRAqNqxXgU6TKlEglv/578fuE5N6yn6X/pRHjoSh2HPAcgqaWKJDMVFWjz+ENVWCz6P
      h8rqajKpFIqiYDQaD7PXglIyaRYffJWHShp4KQ9lxKHYcwDcm5t4AmGMWig2aph0uimzmPHa
      V9ArERJZE91d7U8vJMRzZO+XRalvJBCaIavVU1drZn55hc6e06zZ7ThWl2npLfwMMdk8nbGW
      yWRy6uer92xWLunyPNvXUIhgKEJbaxOTC24uXepmYXKCupYOrNZK4vH4zpCFQl0WRaPNz2gj
      nU6XUz+Tp941Grmky/Nsf0MhmtsAqKquAaCvv//hoyX57kuIgpDdoELVJABC1SQAQtUkAELV
      JABC1SQAQtX2vYM6EQ2z4fJQ39SC3+2kuraedCqJoiiYTKbD6PFEmnKOc3XiHw9c58c9bzLQ
      MJiHjtRp3wFYXLJjKK4k5Fwmbaxg3r6MQQmT0JTRfar1MHo8kbZiPu6tjxy4zqXWF3e9P+n/
      ikxs6cD1TTU/QaMrPnCd59W+A9B1upeId4XR+QCXrrQRC/jZWF+n6cxQ7lAIJU/DCU7gUIh8
      XeblScNEEp5PSPk+OnB9feXLaE7w5e/3HQC/z82mJ8bFC2dYnJqgvvUUVVUWEolE7lAIbZ6G
      E5zAoRD5usrFk4eJ5Ke+TqdDe4KHcvx/fOBYHn/8KGIAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Energy production per energy type' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAAOMUlEQVR4nO3dyW8baXrH8V8VlyIlkeImkbI2krI227LsdrvtQdKDmZySHswhuSR/QpL/
      Itcgp5wCdO4TBPBxeg5BEARBpiftbkuO7W7JWixSG0ktFPfiUvXmYFszE4v2UCKLpN/fBzDU
      UovSUzC/JEv0IypCCAEiSandHoComxgASY0B0JW9WH2Mr7/+BoVKraXL6aUi6kZ3H4Hbu/rd
      6aPwcmMHf/JnX6CS3sR3+zl4PAE46lnkanYM2g0U6gJ+TeD4NI/Y7HVoZh22YBQrX/0CSvwh
      gnYDgQEbjvIF1GsNjMXmkHm1DsfwKD69vdjR2XkPQFdW10vY2UngOL0H7/gMEmsr+O9v/hc1
      vYTNjU3cvXcPm4k03KKErYzAN2sJ+IY0hEIRLCwuIp9O4NnOIUrHh5hfWsa3//YITzbTKBdL
      HZ+dAdCVTU1Polwowu0fQ8jjRmzuBj69PQ+Pz4/ZhUUMOO24NuLFRjKNhQkVhYoTmk3B7O0l
      7L1cx52lGAzVDzSq+PbxE/zRz/4KNyb88Pl9HZ9dafePQd9+OUVR2vllqZ8Jga3158jV7IhG
      fLB7Q/C6HOf/e2vte0Ti8zg73EFwfAYuCx+Ytz0A0zShKAoDoL7QcmtnmSTSJQe8tgqOchXM
      XZ/G+vomApFJTIQDEEJACMEAqC+0FIBo6Dg8KUCoAyjAQHwiiBera5i9fw+prQ3gTQCKooBP
      MFM/aCmAs5MT1GpVpE7zmBodhl6pYGDAiWKpjLrx+qGPqqp8CER9o/VzALOBXFGHXVSRypYR
      mxpHYnsTwbFpeAc1ngNQX+FJMEmNzwOQ1BgASY0BkNQYAEmNAZDUGABJjQGQ1BgASY0BkNQY
      AEmNAZDUGABJjQGQ1BgASY0BkNRa2ghrVEt4ufkKdeGABh2GzYWpiB/rrw7g9YcwF5vo1JxE
      HdFSAHZtEG4HUK0pcLk1nOXL2EsaWLx7BwcbGzBNE4ZhAOCvRaH+0FIAtUoRLk8I5mEa7kAI
      jXodiqIisb0DYbzeBwbAjTDqGy2tRArTQDabhWvQC5uoo1wz4fMOIZ87w4BnGA6bypVI6ivc
      CSap8adAJDUGQFJjACQ1BkBSYwAkNQZAUmMAJDUGQFJjACQ1BkBSYwAkNQZAUmMAJDUGQFJj
      ACS1lgIQZgNbG+s4zZWgl3JI7KUghMDuzjbK1UanZiTqmJYWYox6FTXDxNraBjS7isCwG/m8
      DndkErnUAW7dXOBCDPWVlnaCbQ4N6cQaVIcGu12FZ2gIe8ksxhY9qByrXIqnvtNSANVSHqWq
      AbvdhQGniY1kBovLs3j59Cn8I2Nciqe+w51gkhp/CkRSYwAkNQZAUmMAJDUGQFJjACQ1BkBS
      YwAktZaeCb6qo2IGP6SeW/ktWzYViCIaiHd7DLKIpQG8OtnEP/36H638li37i9t/yQAkwodA
      JDUGQFJjACQ1BkBSuzCAWq2GNv8raaKedGEAX375Jer1utWzEFmu6Y9BHz16hAcPHmBiYgJO
      pxMAYNTKWN/Yhs3lgSYqKNUVxKbGsLGxDX94AlNjIcsGJ2qHCwOIxWIYGBhAMpmEqqqIRqMA
      ANXhRjw6ia3dI8CowjTtyOweIra0jNTmBsxw4L07wYZpdu5I2sQ0TTQa/A0XsrgwgC+++OLC
      Tzb0AjZ3j3BjfgalYhG1whH2D3NwFEqoG+YHd4Jtau+fc6uqCrvd0ucHqYuaXiPXVn+DR48e
      4TerP5x/zDAFFKOKnd1DNPQislU7bt1dRv3kEFMxPntK/afpTd1ZoYKl27fh8QXPP6YNDuPm
      zeHz9/0jr99GZ2Y7NyFRBzW9B5icGMOL589RKOtWzkNkqaYBJPf2MDMTw14yaeU8RJZqGkDA
      68Xe3gG8voCV8xBZ6sIAki+f4jBbRDabRUWvWj0TkWUuPAmenL0N0/kKP/7xT5BMJqyeicgy
      FwZQL57gV199hWsTU4jOLVk9E5FlLnwI5PSE8PDhQ/z85z+DWclZPRORZZqeBHs1FV/98leA
      5rVyHiJLNQ1Ar+qo6jpOs1kr5yGyVNNngr2+AMbHFRSqfCKMPl4X3gMUssdIHZ2iXNExHY1Z
      PRORZS4MwDQb2HqVwMhIEIntLatnIrLMhQEMByN4cHseKysrGA5FrJ6JyDJNT4JPzs4QjUZR
      LuatnIfIUk0D0JwayuUKnJrLynmILNV89UnV8PlPH2BA+91PEdDLZagODTZFoNYw4dKc0CsV
      OF1u2FS+MB71l6YBGNUz/Ou//AKLy5/i4Z1FAECjWsFBKoXTXAlDDsAQAl6vF9lyHTbFhpsL
      M5YNTtQOTQPQqw0EfB5UypXzj9kcDujlMq7PzSKzt4eJUQ/W1/Yw+9m910vxH3ihbC7FU69p
      HoBeQb1h4Psnv0YkEsZifByVsxOUaiZOT7LwuG3Y3jvBzTsLWH/2FIHwBJfiqe80/Zv+yZ/+
      +TsfGwhEcD/w2x+Ljr15u3znTtsHI7JC0wC+X/0f7J+UEJuZR3z6GlS+8jt9hJo+JnHYVBQL
      BexsrWP1xYaVMxFZpmkAhing0pyoN0zEY1HrJiKyUPNngnNFfPbZfWh2E98/e2blTESWaXoO
      MBuPYmVlBbHrCxgaGm72aUR9rWkAG2trGJu+gWAgAJ93yMqZiCzTNIDRcBBPnq6gOn8DnyzN
      WzlT3xG1MvR//7tuj/Feqj8G7eFfd3uMntM0gKNsCaPhIGpFrkR+kFlHY+2X3Z7ivWzj9wAG
      8I6mJ8HTE9eQ2duFOzDW7FOI+l7TAA4OdmF3ulCplK2ch8hSTQMoFoqw2e198e93iC7rwnOA
      o0wKP/r8p8jXFDSqRatnIrLMhTfvu4kt5E5SSKaOkUjsWDwSkXUuvAcIB/34emUNAHAtvmDp
      QERWujCA8fgNjMdvWD0LkeW4+UHvdfT3/4D6wUG3x2hKm5tF8G//5tKXby0AIbCzvYHRyevI
      Z5I4KVQxE49iZ3MDoWtRhPz8JxMfm8bxMRqpVLfHaMoWCn74k96jpQDMRg1GXUe5ZiKdTsPt
      C+NsP4FQfB7HiW0EfXMQQkAIceFKpBDiSsNaQUDAbHF3WfTBrrMAWj6uviCudlwtBaA6NHgG
      X/+eoKW793GWTmB7J4+ZCRveXt/fXvkvurL3/tUfgOiPUFv25obp43O142opgLpewuFRHnZ9
      H7q9jmy5hqV7S9hce4bgtRgURYGqqk2X4vthrVJRFNhstpYuI/rgycLLHFdfuOJxtRSAwzWI
      5U8+PX9/4s3bm7eXLz0AUTf1/k0XUQcxAJIaAyCpMQCSGgMgqTEAkhoDIKkxAJIaAyCpMQCS
      GgMgqTEAkhoDIKkxAJIaAyCpMQCSWms7wXUd3377GLPLP0J2dx1npSpi0xPYShzA6w9hLjbx
      4S9C1ENa3Al2IToRhmEKGIqGhfgonj/bwc0/vo+DDXlfKFv0wQtrCyEu9QLgosc3uS97XG+1
      FIDRqCGbzcFuK6BRK2P/UEdk3I/EdgLCUKR9oWzRBy+srSjKpV4AXEFv73Ff9rjeavmS/sg0
      VLsK39wcinoDw55B5M+yGPD6Lj0EUbe0FIDN7sTo6Oj5+z7n67fD/kBbhyKySu8/JiHqIAZA
      UmMAJDUGQFJjACQ1BkBSYwAkNQZAUmMAJDUGQFJjACQ1BkBSYwAkNQZAUuv9TQ6iDign/xlm
      7fjy9wDZoxRe/LAOvW5gd2cb5WrvrwUSvVU7e4za6X9ePoDk3h5GRkahZxLAUBDbm5vtnI/I
      Epd8CCQwN7+AzH4SuydVzH0WQ+UkzaX4Hsal+HcuCeAK5wDHqUNkSzVcX5jG5tOn8I+McSm+
      h3Ep/p1LArh0AAom47OYfPPe3bvcCab+1Ps3yUQdxABIagyApMYASGoMgKTGAEhqDICkxgBI
      agyApMYASGoMgKTGAEhqDICkduUAjGoRq6urSB4ctWMeIktdOYDM7iFmlpahF7LtmIfIUlcO
      wOVSkc8XUW/0/rYX0f935QB84zE0smlMx+PtmIfIUlfe5VMUFdPx6wBwvhPcbCXSow1jeeyT
      q37LjgoPRc73mv9QQihQpj/v0ERtErze8nEBgGN+HkrA34GB2sM+PX2p41IHbwKOUShCiLZu
      PZum2TSAfmcYBmw2W7fHaDuZj6vtPwb9GK/4b6l9sNR/GTIfV0cCaEcE3z3+GqvfPUZON2Ca
      JoQQSKUOIYQ4/2OaAqKex1by+Pc+/ts/5vl/t0Mn4z5MbuP58+fIl+sQpvl7x5FMbKNudO7X
      k3T0RksIbL/8Hi9evEC2qL/zd9NJf8hx9ezv8zCFgmHNhsTWSxzu7SA8Hkd6/xWWZrN4lVUR
      GjJQ1WsIBIZRrdjwX/+xgqoygGsRP2JBDTtZFfnSKfR8BW6PBw/uLXf7kN7rtKjj1q1byB0f
      YOXlETT3EGzVLLYyZcxPj7y5svThvatZhW66EBgyUa1W8eTZN3D6RnG0v4+F5U9wbaS75xc9
      e9/n1FwYiy/Ca2sgOruIqclxRMIjcLscmF2Yh2IKhEdDqNVqEKYBx6APC7MxwGzg5DQLQEV0
      5jrCoxGE/J5uH84H2cwGjk9PUSiW4Q+FIcw6yjUDLkcfXul/l+pAvZyD2+VA5vgYcAxCr1Qw
      MxPFUSbT7enafxLcLrquw+VyQZgNpFIZBEbCqORP4XAPQnMNQDGqyJzkEBkNoFoXqOsFVE07
      hpwK8mUdXs8wbA4bjHoDigJomtbtQ3ov02gglU5jZDSCs5MjeAIj0POnMGwahtxOOJwa1D49
      v2pUK0gfZzEaDqOQy8I9MIhSPgf3cACDLmdXZ+vZAIis0LMPgYiswABIagyApMYASGoMgKTG
      AEhqDICkxgBIagyApMYASGr/B3AtaG3o6nL8AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='GDP/Country' width='192'>
      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
      AElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='GDP/Region' width='192'>
      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
      AAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Hoja 10' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Production per country' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Production per region' width='192'>
      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
      084AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Renewable per region' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
