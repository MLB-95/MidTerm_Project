<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20224.22.1117.1841                               -->
<workbook original-version='18.1' source-build='2022.4.0 (20224.22.1117.1841)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SheetIdentifierTracking />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource caption='Sheet1 (df3)' inline='true' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='df3' name='excel-direct.0dfmg0a1dyyeqk15cx9jc11svdhr'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/migue/Documents/GitHub/IronMiguel/IH_lectures/MidTerm_Project/df3.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.0dfmg0a1dyyeqk15cx9jc11svdhr' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:L10001:no:A1:L2147483647:0' header='yes' outcome='6'>
            <column datatype='integer' name='F1' ordinal='0' />
            <column datatype='string' name='Country' ordinal='1' />
            <column datatype='string' name='Energy_type' ordinal='2' />
            <column datatype='integer' date-parse-format='yyyy' name='Year' ordinal='3' />
            <column datatype='real' name='Energy_consumption' ordinal='4' />
            <column datatype='real' name='Energy_production' ordinal='5' />
            <column datatype='real' name='GDP' ordinal='6' />
            <column datatype='real' name='Population' ordinal='7' />
            <column datatype='real' name='Energy_intensity_per_capita' ordinal='8' />
            <column datatype='real' name='Energy_intensity_by_GDP' ordinal='9' />
            <column datatype='real' name='CO2_emission' ordinal='10' />
            <column datatype='string' name='Region' ordinal='11' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='excel-direct.0dfmg0a1dyyeqk15cx9jc11svdhr' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:L10001:no:A1:L2147483647:0' header='yes' outcome='6'>
            <column datatype='integer' name='F1' ordinal='0' />
            <column datatype='string' name='Country' ordinal='1' />
            <column datatype='string' name='Energy_type' ordinal='2' />
            <column datatype='integer' date-parse-format='yyyy' name='Year' ordinal='3' />
            <column datatype='real' name='Energy_consumption' ordinal='4' />
            <column datatype='real' name='Energy_production' ordinal='5' />
            <column datatype='real' name='GDP' ordinal='6' />
            <column datatype='real' name='Population' ordinal='7' />
            <column datatype='real' name='Energy_intensity_per_capita' ordinal='8' />
            <column datatype='real' name='Energy_intensity_by_GDP' ordinal='9' />
            <column datatype='real' name='CO2_emission' ordinal='10' />
            <column datatype='string' name='Region' ordinal='11' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LES_RES_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Energy_type</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Energy_type]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Energy_type</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LES_RES_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Year]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Year</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Energy_consumption</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Energy_consumption]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Energy_consumption</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Energy_production</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Energy_production]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Energy_production</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GDP</remote-name>
            <remote-type>5</remote-type>
            <local-name>[GDP]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>GDP</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Population]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Population</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Energy_intensity_per_capita</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Energy_intensity_per_capita]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Energy_intensity_per_capita</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Energy_intensity_by_GDP</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Energy_intensity_by_GDP]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Energy_intensity_by_GDP</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CO2_emission</remote-name>
            <remote-type>5</remote-type>
            <local-name>[CO2_emission]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>CO2_emission</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Region</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Region]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Region</remote-alias>
            <ordinal>11</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LES_RES_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>5</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:L10001:no:A1:L2147483647:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='CO2 emission' datatype='real' name='[CO2_emission]' role='measure' type='quantitative' />
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Energy consumption' datatype='real' name='[Energy_consumption]' role='measure' type='quantitative' />
      <column caption='Energy intensity by GDP' datatype='real' name='[Energy_intensity_by_GDP]' role='measure' type='quantitative' />
      <column caption='Energy intensity per capita' datatype='real' name='[Energy_intensity_per_capita]' role='measure' type='quantitative' />
      <column caption='Energy production' datatype='real' name='[Energy_production]' role='measure' type='quantitative' />
      <column caption='Energy type' datatype='string' name='[Energy_type]' role='dimension' type='nominal' />
      <column datatype='integer' hidden='true' name='[F1]' role='measure' type='quantitative' />
      <column datatype='string' name='[Region]' role='dimension' type='nominal' />
      <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='Sheet1' datatype='table' name='[__tableau_internal_object_id__].[Sheet1_418B5E1974044438ADF937532E3FD955]' role='measure' type='quantitative' />
      <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
      <column-instance column='[Energy_type]' derivation='None' name='[none:Energy_type:nk]' pivot='key' type='nominal' />
      <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
      <column-instance column='[Energy_production]' derivation='Sum' name='[pcto:sum:Energy_production:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[Energy_consumption]' derivation='Sum' name='[sum:Energy_consumption:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Energy_production]' derivation='Sum' name='[sum:Energy_production:qk]' pivot='key' type='quantitative' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Energy_type:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;all_energy_types&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;petroleum_n_other_liquids&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;nuclear&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;natural_gas&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;renewables_n_other&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;coal&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Region:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Africa&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Eastern Europe&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;Western Europe&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Oceania&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;World&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Asia&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Latin America&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Arab contries&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;USA and territories&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_consumption:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[pcto:sum:Energy_production:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_production:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Guadeloupe&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Burma&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;North Korea&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;British Virgin Islands&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Côte d’Ivoire&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Reunion&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;The Bahamas&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Gambia, The&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Macau&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Guam&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Martinique&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Timor-Leste&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Congo-Brazzaville&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Palestinian Territories&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;World&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Cabo Verde&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Northern Mariana Islands&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Saint Vincent/Grenadines&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;American Samoa&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Congo-Kinshasa&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Puerto Rico&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;España&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Sheet1' id='Sheet1_418B5E1974044438ADF937532E3FD955'>
            <properties context=''>
              <relation connection='excel-direct.0dfmg0a1dyyeqk15cx9jc11svdhr' name='Sheet1' table='[Sheet1$]' type='table'>
                <columns gridOrigin='A1:L10001:no:A1:L2147483647:0' header='yes' outcome='6'>
                  <column datatype='integer' name='F1' ordinal='0' />
                  <column datatype='string' name='Country' ordinal='1' />
                  <column datatype='string' name='Energy_type' ordinal='2' />
                  <column datatype='integer' date-parse-format='yyyy' name='Year' ordinal='3' />
                  <column datatype='real' name='Energy_consumption' ordinal='4' />
                  <column datatype='real' name='Energy_production' ordinal='5' />
                  <column datatype='real' name='GDP' ordinal='6' />
                  <column datatype='real' name='Population' ordinal='7' />
                  <column datatype='real' name='Energy_intensity_per_capita' ordinal='8' />
                  <column datatype='real' name='Energy_intensity_by_GDP' ordinal='9' />
                  <column datatype='real' name='CO2_emission' ordinal='10' />
                  <column datatype='string' name='Region' ordinal='11' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='CO2 Emissions/GDP'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (df3)' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' />
          </datasources>
          <datasource-dependencies datasource='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx'>
            <column caption='CO2 emission' datatype='real' name='[CO2_emission]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Energy type' datatype='string' name='[Energy_type]' role='dimension' type='nominal' />
            <column datatype='real' name='[GDP]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Energy_type]' derivation='None' name='[none:Energy_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CO2_emission]' derivation='Sum' name='[sum:CO2_emission:qk]' pivot='key' type='quantitative' />
            <column-instance column='[GDP]' derivation='Sum' name='[sum:GDP:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Country:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Country:nk]' member='&quot;China&quot;' />
                <groupfilter function='member' level='[none:Country:nk]' member='&quot;United States&quot;' />
                <groupfilter function='member' level='[none:Country:nk]' member='&quot;World&quot;' />
                <groupfilter function='member' level='[none:Country:nk]' member='%null%' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]'>
            <groupfilter function='member' level='[none:Energy_type:nk]' member='&quot;all_energy_types&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</column>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]</column>
          </slices>
          <aggregation value='false' />
        </view>
        <style />
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:GDP:qk]' />
              <lod column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' />
              <lod column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:CO2_emission:qk]</rows>
        <cols>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:GDP:qk]</cols>
      </table>
      <simple-id uuid='{0F8B9CD3-43F6-4D58-BDCE-91CCB5461DD8}' />
    </worksheet>
    <worksheet name='CO2 emission/energy type'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (df3)' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' />
          </datasources>
          <datasource-dependencies datasource='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx'>
            <column caption='CO2 emission' datatype='real' name='[CO2_emission]' role='measure' type='quantitative' />
            <column caption='Energy type' datatype='string' name='[Energy_type]' role='dimension' type='nominal' />
            <column-instance column='[Energy_type]' derivation='None' name='[none:Energy_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[CO2_emission]' derivation='Sum' name='[sum:CO2_emission:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Energy_type:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Energy_type:nk]' member='&quot;all_energy_types&quot;' />
                <groupfilter function='member' level='[none:Energy_type:nk]' member='%null%' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:CO2_emission:qk]</rows>
        <cols>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]</cols>
      </table>
      <simple-id uuid='{F07FC092-7535-46A0-A6BD-AD42CF66EB3E}' />
    </worksheet>
    <worksheet name='CO2 emissions/Country'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (df3)' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' />
          </datasources>
          <datasource-dependencies datasource='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx'>
            <column caption='CO2 emission' datatype='real' name='[CO2_emission]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[CO2_emission]' derivation='Sum' name='[sum:CO2_emission:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Russia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United Arab Emirates&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United States&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]'>
            <groupfilter from='1993' function='range' level='[none:Year:ok]' to='2019' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:CO2_emission:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]</column>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' />
              <lod column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:CO2_emission:qk]</rows>
        <cols>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</cols>
        <pages>
          <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]</column>
        </pages>
      </table>
      <simple-id uuid='{EB0DF92E-F8D2-4597-B292-A6FEBBCA833D}' />
    </worksheet>
    <worksheet name='CO2 emissions/Regions'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (df3)' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' />
          </datasources>
          <datasource-dependencies datasource='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx'>
            <column caption='CO2 emission' datatype='real' name='[CO2_emission]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='string' name='[Region]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[CO2_emission]' derivation='Sum' name='[sum:CO2_emission:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Russia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United Arab Emirates&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United States&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]'>
            <groupfilter from='1993' function='range' level='[none:Year:ok]' to='2019' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:CO2_emission:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]</column>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' />
              <lod column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:CO2_emission:qk]</rows>
        <cols>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]</cols>
        <pages>
          <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]</column>
        </pages>
      </table>
      <simple-id uuid='{66EED484-8D2D-4FB1-B173-DF2C32DC1CE6}' />
    </worksheet>
    <worksheet name='Consumption per country'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (df3)' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' />
          </datasources>
          <datasource-dependencies datasource='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Energy consumption' datatype='real' name='[Energy_consumption]' role='measure' type='quantitative' />
            <column caption='Energy production' datatype='real' name='[Energy_production]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Energy_consumption]' derivation='Sum' name='[sum:Energy_consumption:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Energy_production]' derivation='Sum' name='[sum:Energy_production:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Russia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United States&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]' included-values='in-range'>
            <min>1993</min>
            <max>2019</max>
          </filter>
          <slices>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</column>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' />
              <lod column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' />
            </encodings>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_consumption:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' />
              <lod column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' />
            </encodings>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_production:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' />
              <lod column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_consumption:qk] + [federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_production:qk])</rows>
        <cols>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</cols>
      </table>
      <simple-id uuid='{46566CBA-A548-4BBD-83BF-D000F6F8A235}' />
    </worksheet>
    <worksheet name='Energy production per energy type'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (df3)' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' />
          </datasources>
          <datasource-dependencies datasource='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx'>
            <column caption='Energy production' datatype='real' name='[Energy_production]' role='measure' type='quantitative' />
            <column caption='Energy type' datatype='string' name='[Energy_type]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Energy_type]' derivation='None' name='[none:Energy_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Energy_production]' derivation='Sum' name='[sum:Energy_production:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Energy_type:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Energy_type:nk]' member='&quot;all_energy_types&quot;' />
                <groupfilter function='member' level='[none:Energy_type:nk]' member='%null%' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]'>
            <groupfilter from='1992' function='range' level='[none:Year:ok]' to='2019' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_production:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]</column>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]</column>
          </slices>
          <aggregation value='false' />
        </view>
        <style>
          <style-rule element='map'>
            <format attr='washout' value='0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]</rows>
        <cols>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_production:qk]</cols>
        <pages>
          <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]</column>
        </pages>
        <page-trail-options enabled='true' trail-effect='none' />
      </table>
      <simple-id uuid='{D5D3E132-0240-4D22-80BC-DBA1AF8AC903}' />
    </worksheet>
    <worksheet name='GDP/Country'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (df3)' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[GDP]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[GDP]' derivation='Sum' name='[sum:GDP:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Country:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Country:nk]' member='&quot;World&quot;' />
                <groupfilter function='member' level='[none:Country:nk]' member='%null%' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]'>
            <groupfilter from='1992' function='range' level='[none:Year:ok]' to='2019' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]</column>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</column>
          </slices>
          <aggregation value='false' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[Longitude (generated)]' field-type='quantitative' max='27850360.958831072' min='-13038340.893611016' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[Latitude (generated)]' field-type='quantitative' max='14557660.213948265' min='-10521643.354585439' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:GDP:qk]' palette='red_green_white_diverging_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:GDP:qk]' />
              <color column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:GDP:qk]' />
              <lod column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' />
              <geometry column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[Latitude (generated)]</rows>
        <cols>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[Longitude (generated)]</cols>
        <pages>
          <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]</column>
        </pages>
        <page-trail-options enabled='true' />
      </table>
      <simple-id uuid='{32802CA9-DD56-4632-95E7-7579DFA079DA}' />
    </worksheet>
    <worksheet name='Production per country'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (df3)' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' />
          </datasources>
          <datasource-dependencies datasource='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Energy production' datatype='real' name='[Energy_production]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Energy_production]' derivation='Sum' name='[sum:Energy_production:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Brazil&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Russia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United States&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]' included-values='in-range'>
            <min>1993</min>
            <max>2019</max>
          </filter>
          <slices>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</column>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' />
              <lod column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_production:qk]</rows>
        <cols>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</cols>
      </table>
      <simple-id uuid='{28387289-F0DF-4C73-9B55-898543AEC5FC}' />
    </worksheet>
    <worksheet name='Production per region'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (df3)' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' />
          </datasources>
          <datasource-dependencies datasource='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx'>
            <column caption='Energy production' datatype='real' name='[Energy_production]' role='measure' type='quantitative' />
            <column datatype='string' name='[Region]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Energy_production]' derivation='Sum' name='[sum:Energy_production:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Region:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Region:nk]' member='&quot;World&quot;' />
                <groupfilter function='member' level='[none:Region:nk]' member='%null%' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Area' />
            <encodings>
              <color column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_production:qk]</rows>
        <cols>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</cols>
      </table>
      <simple-id uuid='{2277F14A-7015-419F-A9B4-AA80A9A79243}' />
    </worksheet>
    <worksheet name='Renewable per region'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (df3)' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' />
          </datasources>
          <datasource-dependencies datasource='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx'>
            <column caption='Energy production' datatype='real' name='[Energy_production]' role='measure' type='quantitative' />
            <column caption='Energy type' datatype='string' name='[Energy_type]' role='dimension' type='nominal' />
            <column datatype='string' name='[Region]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Energy_type]' derivation='None' name='[none:Energy_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Energy_production]' derivation='Sum' name='[sum:Energy_production:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]'>
            <groupfilter function='member' level='[none:Energy_type:nk]' member='&quot;renewables_n_other&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Region:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Region:nk]' member='&quot;World&quot;' />
                <groupfilter function='member' level='[none:Region:nk]' member='%null%' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]</column>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Area' />
            <encodings>
              <color column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_production:qk]</rows>
        <cols>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</cols>
      </table>
      <simple-id uuid='{F38DB2FF-4F00-4779-B1F9-846225E7BF67}' />
    </worksheet>
  </worksheets>
  <windows source-height='37'>
    <window class='worksheet' name='GDP/Country'>
      <cards>
        <edge name='left'>
          <strip size='200'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='38'>
            <card type='columns' />
          </strip>
          <strip size='38'>
            <card type='rows' />
          </strip>
          <strip size='38'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='218'>
            <card pane-specification-id='1' param='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:GDP:qk]' type='color' />
            <card type='currpage' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>2007</bucket>
          </multibucket>
        </current-page>
        <highlight>
          <color-one-way>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:GDP:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{6F3C1735-6DD1-459B-815B-EA3526CB9C49}' />
    </window>
    <window class='worksheet' name='Energy production per energy type'>
      <cards>
        <edge name='left'>
          <strip size='218'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='38'>
            <card type='columns' />
          </strip>
          <strip size='38'>
            <card type='rows' />
          </strip>
          <strip size='38'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='218'>
            <card looped='1' type='currpage' />
            <card pane-specification-id='0' param='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>2019</bucket>
          </multibucket>
        </current-page>
        <highlight>
          <color-one-way>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_production:qk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{4AFE2931-ADAE-41AD-BE1B-5222FEEA274D}' />
    </window>
    <window class='worksheet' maximized='true' name='Renewable per region'>
      <cards>
        <edge name='left'>
          <strip size='200'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='38'>
            <card type='columns' />
          </strip>
          <strip size='38'>
            <card type='rows' />
          </strip>
          <strip size='38'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='218'>
            <card pane-specification-id='0' param='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{BC171670-06A6-4ECF-9830-D9A8C80DEA3F}' />
    </window>
    <window class='worksheet' name='Production per region'>
      <cards>
        <edge name='left'>
          <strip size='200'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='38'>
            <card type='columns' />
          </strip>
          <strip size='38'>
            <card type='rows' />
          </strip>
          <strip size='38'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='218'>
            <card pane-specification-id='0' param='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>&quot;Western Europe&quot;</bucket>
          </multibucket>
        </current-page>
        <highlight>
          <color-one-way>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{4A320D6F-19DC-4DA0-B355-CB80E65DEA4C}' />
    </window>
    <window class='worksheet' name='Consumption per country'>
      <cards>
        <edge name='left'>
          <strip size='200'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='38'>
            <card type='columns' />
          </strip>
          <strip size='38'>
            <card type='rows' />
          </strip>
          <strip size='38'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='218'>
            <card pane-specification-id='1' param='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{9E37EC6C-0134-4EDB-96AF-949A5DD83E40}' />
    </window>
    <window class='worksheet' name='Production per country'>
      <cards>
        <edge name='left'>
          <strip size='200'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='38'>
            <card type='columns' />
          </strip>
          <strip size='38'>
            <card type='rows' />
          </strip>
          <strip size='38'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='217'>
            <card pane-specification-id='0' param='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C0627554-4543-42A1-A98A-B1A249043E13}' />
    </window>
    <window class='worksheet' name='CO2 Emissions/GDP'>
      <cards>
        <edge name='left'>
          <strip size='200'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='38'>
            <card type='columns' />
          </strip>
          <strip size='38'>
            <card type='rows' />
          </strip>
          <strip size='38'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{D2A92961-D36D-43D3-B236-10B4D86656D2}' />
    </window>
    <window class='worksheet' name='CO2 emissions/Country'>
      <cards>
        <edge name='left'>
          <strip size='200'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='38'>
            <card type='columns' />
          </strip>
          <strip size='38'>
            <card type='rows' />
          </strip>
          <strip size='38'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='218'>
            <card pane-specification-id='0' param='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' type='color' />
            <card type='currpage' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>2019</bucket>
          </multibucket>
        </current-page>
        <highlight>
          <color-one-way>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{0353DF80-0414-48A7-A5FE-08B6F8068261}' />
    </window>
    <window class='worksheet' name='CO2 emissions/Regions'>
      <cards>
        <edge name='left'>
          <strip size='200'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='38'>
            <card type='columns' />
          </strip>
          <strip size='38'>
            <card type='rows' />
          </strip>
          <strip size='38'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='218'>
            <card pane-specification-id='0' param='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' type='color' />
            <card type='currpage' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>1993</bucket>
          </multibucket>
        </current-page>
        <highlight>
          <color-one-way>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{11142978-06C4-4724-AFA3-A95CD90A13E1}' />
    </window>
    <window class='worksheet' name='CO2 emission/energy type'>
      <cards>
        <edge name='left'>
          <strip size='200'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='38'>
            <card type='columns' />
          </strip>
          <strip size='38'>
            <card type='rows' />
          </strip>
          <strip size='38'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{4D0D9565-A089-40AB-8465-17BAA3869D58}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='CO2 Emissions/GDP' width='192'>
      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
      fSosB3e+AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='CO2 emission/energy type' width='192'>
      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
      uf4BhkBz+Clq4QIAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='CO2 emissions/Country' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='CO2 emissions/Regions' width='192'>
      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
      4j72/zvPrxLT6I8FAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Consumption per country' width='192'>
      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
      xD/2MArkAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='187' name='Energy production per energy type' width='192'>
      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
      AABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='GDP/Country' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Production per country' width='192'>
      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
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Production per region' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Renewable per region' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAAgAElEQVR4nO2daW9cSZaen4i4S25kcpFEUqR2ValUVb242z3jWTzT8IxtGPAABgwD/ubf
      ZcAw/MH+AQYMA4Y9hoGZHne3p7dq1arSLkoiM0nmnneJxR9ukmJJlMSUUhSpjAdI5MLkybiZ
      5431xAnhnHN4PFOKfNcF8HjeJRMRgDFmEmbQWns73s6R2vEtgGeq8QLwTDVeAJ6pxgvAM9V4
      AXimGi8Az1RzeAE4S3Nzg43NJsZotrZb+DU0z0knGOfNURxz69Zdeq0mpZLioQ44d6b2tsrm
      8bx1Di8AISmFMHd6GZP2OLu2zO07PcxiGWvtRFoDa+1EFkW8HW/nsIzVArTafdZWz9JtGH5/
      4zaXr32CUgpg7/5N0FoTBGMVydvxdt7IzljvPrOyCsDC0ioLS6tjfZDHcxzxs0CeqcYLwDPV
      eAF4phovAM9U4wXgmWq8ADxTjReAZ6oZax1ga+MRO0PDqWrI460W5y9dpRq/+QKGx/OuGMN7
      NTdv3mFheZWtVg+cQCmJtRZr7UQKY62dyP5ib8fbOSxjCEBQmZ2j7BLKyxeYER3u3tviw8un
      EEIg5Zv3ppxz3o63c6R2xhCA4sLqaVpDS9kl3HvS58qVywgh9m6TwNvxdo7Szlgd+PriGeqj
      xx/OLoz1QR7PccTPAnmmGi8Az1TjBeCZarwAPFONF4BnqvEC8Ew1XgCeqWasdYCNR/fppoKl
      eszdRw0+/Ohj4mAyCxgez7tAHP6EGM3//ZufUz+zTCjh6qUz3HqQcOn8ItbaiazkWWsnsiTu
      7Xg7h2WsWKBafZ4ZqdnOHN1OFxXXfFoUb+dE2xlDLorLF88iZxb59MPLbHUdF1dmxyyix3O8
      GEsu1dl5qiOfv3Rh7W2Ux+M5UvwskGeq8QLwTDVeAJ6pxgvAM9V4AXimGi8Az1TjBeCZasZa
      B/j26y+wYY25kmCr0/d5gTwnnrG8N88ynMtIlcDqHGMdxhh/RJK3c2LtjCEAy+nlNTbW1ykt
      naNWUWxudrh6YRHwsUDezsm0M8YYQBIFgpVLl5mrlBnoClfO+9QonpPNWHKZnV/ce7y6Up54
      YTyeo8bPAnmmGi8Az1TjBeCZarwAPFONF4BnqvEC8Ew1XgCeqWasdYDf/uqXVOaXKZOw0+my
      dPETluZKb6tsHs9bZ4y8QPDgzk2eNLrMLtS5dmWZW7c6XLx0xucF8nZOrJ2xYoG0dqgwZCaW
      fPa7b1j74FOfF8jbOdF2xni35NIHH3Jp9OzsubE+x+M5lvhBsGeq8QLwTDVeAJ6pxgvAM9V4
      AXimGi8Az1TjBeCZasYTgHNkWYbROb1eD23ePBOEx/MuGWvZrNV4zO++fcTaYgWiMqtrZYIJ
      rAB7PO+KQwvAmYzffv41uXHUP7jAztZjNhpd1pZmfF4gb+fE2hkrGA7g3r37VGPFRqPB0vmP
      OFUvYYzxsUDezom0c+C7nbP85pd/R6uf8ZM/+Skz8dOhwoUL5wE4tbz6BkX1eI4HBw6Cnc5o
      D3MuX75MrPw5wJ73lwMFIFRA497X/Nf//j/J/EyP5z3m4C6QyTl18WM+DnPamaUW++UCz/vJ
      gZ4tgxKnZyKadoblmp/m9Ly/HCiA3//+tzx8cJ/G47t0E98F8ry/HCiAM3M1uloxFysGfgzg
      eY85cAxQqy+wenaNcytLLJZ9/9/z/nKgd5erNbrtbe5+fYN2Yp/+wVl6vT7OaJrbOxNZ/fV4
      3iUHtgBCBsyWJNsDSTV8ug6w9WSdL+83OTtfJi4pHuqQc2dqR1ZYj2dSOOdYb3RfFAskWLtw
      FXn3Jt3MUY2KWKAvb95hmGmGs1Uura1w+04Ps1j2sUDezomyk+WGn914wOd3mwcLQOcpt7/9
      moGJ+GGp6CUJFfGnf/ZnrK+vUw4Fv79xm8sffeLzAnk7J8aOc477m23++u/v0EsywnTrYAF8
      /pufc+vhJrMh7AwtKzNPnXt1tYgBWjhz9o0L7PG8bZxzGOv49uE2Xz/Y4u6TFs7knO1/xp9k
      Nw8WwA/+4B/T2OkxHGoqkY8F8pw8rHU8bHT46n6Tmw+3McYipSAaPuEfJT/jgi6DvP7iMUAp
      jkhsRBx4AXhODo1Wn6/uNfn6wRb9JEdJQZ4OqesNLpubfJxtE9gLoIpDHg+OBbI5g8xSDzTt
      xFKq+nAIz/FlmOZ8ea/JZ7ee0O5nKCnQeUYpa3LO3OGafsCCCcGeAnkN5NNK/eAWQCgqlQrX
      PvkBpyt+Icxz/LDO0djp85ubT7j9aAdjHcZogqzFWX2Xa/ouy84h9DzID0EoOKAef2EXaP32
      l9x+sM6/+tf/lnrJd4M87x5rHY+2ujRaA76816DZGuCspma2WUgfsZo3uSi7BFkZ5CUQwYFO
      v5+DBWA11YUl5nFk1q/2et4dzjmSTPPV/Sa/v73JdmeIUhIz7LCs73I9u8madQi7jBWnkO7M
      K51+PwcLQEpMOqSTW372t3/LX/3ln6N8T8hzhDjnGCQ5/+/rR3xxp4GxDucM0XCDD/SXXDeb
      VPUMTlwAGRZOb+0r7T7LGJviHffvfMtOJ2NxvkJ3kHL+0lWqceA3xXs7E7UzSHP+5nf3+ep+
      s5jFSfqsmHtcSz7nggP0GQjmnrMzsRNirMn5m//z16jyHB99/Cmn5mqAYGZmhvXGI07LKlan
      pJmhFAgfCuHtTMROb5jxq2+e8PmdTRxA0uZc/hXfy+5SNzWcuIgVQRHCeUBt75zDjtkKvHAQ
      bLQmGw758vPP+KM/+mMCaUlSTVlaXFimVh3S6QxZmCmU6FsAb+d1ebLV4bffbvL1gy2kEJD1
      uNb/e77nmpTNIsiPIJC8aipmYi2AoEiB2OsMCVYvUySGEMzNz1NfOEUcKgbVGrVqZawP83h2
      cc7RaA34xRcPufVoByUFcrjFlfQGn+pNam6lmL58y1lJXrAQZhBxlXMVS0tn5BYiJShXqnvv
      mamFb7VgnvcT5xxbneGe42Mt8eAx15IbfGT7lDhTOL48mqn3F8wCKcpRxNLVj/j+4hyhXwj2
      vCHOOTr9lL+78YBv13dwzhB0H/Lp4DdcExDKZVArR16uF44BGo/usdXu8E/++V9RPtoyed4j
      nHP0hzk/u/GAr+83AUfYfcAn/V9zXQqUWsOiYALnBL8OLxCAI7B9zl38Q78Q5hkL5xyDNKc7
      yGj3Eh5sdvj8bgOBI+w94NPer/lICFR4vliphdeav58ULxgEQ1wq8Zvffc7V69eOuEieSeOc
      I80NvUFGu5/QG6bUa2WqpZByHBKHijB4eT/XWkeaa5JM009y+sPCVpIZOv2UfpLRHWT0kxxj
      LQJBoCTOGUq9B3zS+w3XnnX8Y8ALS6IqiywGAvfuxOkZg1wbOoOMrfaAVi+hO0jpDDJ6g4zu
      ICU3FuscSgqccwghMNaBo4iTDxRxFFArhZTigEBJBklOkmkGSU6aG6xzWOsQApSUOFdMO1pr
      MUbjdEZoh5RNj6ptU9UdlrImV4QiCM4VK7bHjBdmhx6khuWVVQIfAvFWsdaRaYOxFiVlMR0o
      BeoFfeLd2Jit9pDNVp+NnT7bnSGtXkKuDc5anDVgc5RNCc2Q2PaZt13KpkdFD1DOkqiYYVBj
      oGZIZJVMVWmLmLaKECpECDGypQtbLicwGaFLiOyAikgpZR0quscsGTNoZqQkcgJFjKAEogzh
      hWNV4z/LgSVrtbt88uknlBRkBqoHvcnzSqxzZLmh208YZoZ2P6HTz+gNM4ZpTj/J6Q0zcm0w
      1iGF2BNAoCRhoAiD4r4UKXJt2Omm9IcZWZ4jbUZo+lT0Ditmi1ndZsENqThDVUpCJwgIkURA
      XDikqmEdSGFAZ5A/ApFhyMgxDHH0nUMLQewcJQElIVEWFAGBiHAuACIsMVItFw4uTmbE8IEC
      uHnzK7SxXJxXbA8s82XJbixQc2fI8plZms0dzn3wKfPV49esHSXOObSxe7XydnfIVmdIu5fQ
      GaT0BoWz4ixiVCtHdkjZ9qnYLku6R80MiIUhR5C5AC1DtAzJZYQWIYmM6YoYYTXzusklvcO8
      y5iXggoBASWgAvI0qOjVhbZ21B0pAbNAEUumRq/MH/Q/owbpO1Mi1r6z2ZtJcaAAShIe7fT5
      rAN/cnn3AotYoIebHfqJ4fs/+JBbt5rMXjozlbFArV7CF/ea3H3SotNPSdIco3OUTajYPrN2
      h/m0yWXbo+YsNTQVAbFQBCIEG+BEBUQJVJ1i6sGBs+A0GAs6BxIEHcCNnC8Gtcb+nGbfGaYd
      YkbldWJm3lc7Y0SDWu7eukWzucPswhzZoMep89dZni9PTTTo7ta7L+81eNRoU84arCS3qOsO
      syZlXjrqgSKwIYgqyCrI0mvFqByEtzN5O2OFQ1vrAIEQ7M0kCCHeawE4BLcft/jiziZ3Hu8g
      k21Whzf5IHvMmiohgxX2dmC8oB/8PjjK+2jH5Pk4x6QWg7O9Zyd00PMirHOkWRGS2+6ndPop
      j7c63H3SJu3usDL8hj/NHnFeSiJ5GuKrJ3bgN81YY+jnORtzszQvnR/vnOD3AeccrV7K/Y0W
      O91ioNrpp3SHGUmSkecZymZEdsBs3uB76X0uoamqUxBd8k5/gnDO4awhzzV9KehWK2ytnKG7
      sowtlYAxD8o+qTjn6AxSvnmwzc0HWzzZahOmW5R0h4puM6u7rJgBdTRVLDNSEIkIRQURroE4
      2TMdU4Nz6CxjaC3dKKQ7O0OnXieZr6MrFTigW/zeCsA5R3eQ8c2DLW6ub/Ok0UINNjk/vMlf
      6DbnohBcBKICahaCxedqd2stwjv/saSo3S1ZntFTik61Snt2gcH8HHm9josONz3/3gnAGMtv
      v93g5voOjxttVNLk3PBrfpo2WQ3KBMEShAvvupieMdidp7FaM8wzOqUS7fos3fosycICploB
      ISa3I+yksrHT43/88haNR/e4mHzDT/Mt1mRQOH3lg3ddPM+YmDynn2fszNRozc3Rm6uTLS4c
      2JV5Xd4LAeTa8Isv1/nljTtcaPycfyY6ROFZiP2g9SThrCVNUzphQGNxgfbpRdKFBVDqrf2O
      J14Aj5pd/tevbtN78AV/0fsda6VVHHMnfol+GnDOYfKctrO0Z2bYWZijv3QGUy4f2e83lgDu
      37nJZrPH/EKFLHd7eYHeBVlu+PkXD/nNF3e40Pw5/1RkxOXLMIpi9Iz6ztZibREKbY2hCOxw
      lKMYOYHFy7HLZC1ZntMKA7bqs7SWl0jm6ojwaGPKnHMkOh1PAAvz8/RzRX2mxMbGBp1uQik4
      +iOS1ptd/vev75Csf8lP+zdYjZZBzmOdA+eOd4zKaPZi9zVjLRpwQhA6h5ISqSRCSMQzteBB
      dowxaGdJgTQMSapVtBBkgSIPQ7JSjA5DTBxjSjE2CMBYapsNFre2Weh2qUqFeo1+9WG/H2ct
      SZ6zUymztThPe2WJfGZmr1vjnEMc0e+V6oxetkOWNxGuM44ADJ999jmLy+dGIREO5ziSI5Kc
      c+Tast0d8vmdBp99fZcrW7/gJyIjLj/fz39XS+tuJMBdISc4hlHEoByThyF5EKDDkDyO0FGE
      iWNsFGLDEIRE5BkqSQmThDBNCdOUOM2I8pw4zRDWkJVKDOOItFQirVbIymV0pYyNokMPDq21
      9C5fpHf5Ive0ptxoUm9ucWqnRd1YwjBESPm0UtsV26g1yZ1FI8ilHGVvEFjB3u9gd38PIUhK
      MTvzc3SXl7CVp2l05DPlmeTv5UaVYG41iU7I9ABt+ljbR9AnVoby6KsaIxboxUwyFkgphXNF
      erz1Rof1ZpeN7R7N9pAkGTIzfMgf926wWjqLkKUD7RyFAJxzOGNIs4xESvrlEv1yiWGlQlKr
      ks3MYCplUOrkxMxYS9DuUN9sUO33yZUii2PyOCIPQ3S5jI0jbBThggAL7/y6nHM4HMM8ZZh1
      MXaIsX2sGyJJCaR96aauYyWAv/9qncfbfZ5s92h3h9h8yEze4HT6kFN5hyWXcjqcQQZLL50V
      eFuO4qwlTRLaUchOfZb24gLJ4gK2/PK8GSdGACfEzm7/vZ92yE0LbTpEMkUJc7LXAT7/4ktE
      81tWswY/zHucDQVlUQM1D6X6O5nSTIdDukrSmp1hZ2GewdISthT76dUjpHD4jEHWJTdtct0i
      lAmhdEQC4tH4+XWGEcdKAP+y/znoHBGehvDltfyb4JzD5kX2Am0tuZTkUuz107MwIIsihqWY
      wZnT6FrNT6seIcYa+tmATPfIdBfnekgSImUJgUNGORyKYyUAIU9D0J+4XWctOs/pA+1qmVa9
      Tn9+DlMqFX1aNUrM9IyTT6qJ97wY6yzDPCU1hcMb2wU3IJQZSkDpLc3UOucwZni8BDAxnCPP
      MgbW0K5UaC3M0z21SFafg/D9vOSThLGGYT6kn22h9TaCAaEqujPjnO4yLsU0aU5gu6xFOdfq
      5fdLAM45OlnKvZVleosLZHN13BEvsBw1e4Fio9kQYw3WjaYsnSlutrh3aJwzOCepRLOUowpK
      yLe+uck5h3GWftplmG+h9Q6hTAhkUR9Za5FvIep21+GdGVIWCUux4EIt4Gy1RigLpb0XAnDO
      kaQp9xbn2fjoh+gwPBZdl13nLBzToq0mN5rcZBibYVwGLsfYFIdBCIVgdBMSRIAUEkFQnHLo
      3MiJc6zLcXs3jUOD0yhhQTgEDimKrfZCfDfZsnWWQSppD0KErBGoOuWwTmVMQTgK4e2uCVln
      C/E5ixuJMDdD0nwba9vEKiOSk+3D75XFOZyz5DpBmj4LgeV0LDgVSZbLFSrhwcl9xhJAZ6dJ
      J3WcPTXL/UdNLpw7+863Ruos41Eccf9HPyCfqxcvHmEoRLHgYshNTm4ytM2wNsO5rHBsl2Nt
      CqJwTimKeWkpRotBgpdn33ZP7+0oeRaj/3vliREvIZQQyhzYAXZIUugMQqSsodQsSlbAGRwG
      azVgsK5oQUAjhEObDIHFYQGLwI5EZ/dEt9ePfwtdG21ytO5RFSnLsWI+MqxUyiyU6qhDtihj
      CcCg6Dcf8XWrydnTM9x73OHi2fprFf5NscawZQ23r1xksLZ6ZNOS2hj6WZ9Et8l1G0EPnEXJ
      Fzv2SRhMBxKCfYLYn2tl74yKZ77ikKO7Lussed4nJmUu0JwK4Uw1YKVSI1YzxXve9n6AQWeb
      2ullhp0dZuuzNB4kGGMmFgu0u8vnVXTTlLury2xduYxTRdeAfZ8/yRieVOcMsj5p3iY3HQR9
      IpmjhHv+5EwHByXTPtaxScfUTq4ThB0wqwwLoWOpJDkzF1OPZopjlPax+78TPCPsIAw7rQ5R
      WXBmcZYbXz7gg+sfo0bVwyRWgoUQzweAWVucV2YNA6XYqs/y5Mc/wJbLL+wFvKomMNaQmhxj
      9WiAqDFWj5r7vOiPY8jNEMGASGpCsb/vOl7/46SvvL5tO9rkGJ0Qi5S60pwKBefqMQulGpFU
      h+5mv+UWQPHpD/7B3rO5xTNjfdChGG1qTq2lHwZ0KxV6tQqDuTmy2RlsHI+9IOWcQ1tDoock
      eZdct7GuRyQzwO0NEgVP+6y7KHn8uy6HwY0GqnY0OC1yOkVHPn5zzhWzUSZBuZQZpVkM4XRJ
      cqZcohbOEhzx932sZoG+WFliZ3WZfGYGF0ev1a/fiwJMh6S6Q647QI9A5gRvcWFlnPLtOiPO
      Ym0OLkfgsEgQCiWjIjpUSATiOUd1ezMvxeHR1hmczZEYFIZAmCKprYJYQiwdJSWoKEVJCXJr
      2EgdG5mg52KEqiLF4Wval19bkV3cUcxEGZOgXMJ8YFkI4FQccKoUUQufTkW+yzHSsRJAZ3WF
      7DVzeu7W9Fv9h2j9mFiZYmB3xFe4G51orcbaFGFTSsJQVlBRUFaOipJUlKCsJDNhRKwiAinJ
      rCHRmqHpkhhLYhxD40gsJLYYl0YUzlxWgpKCspKUVUA5CIhkSKyCVzqytZar9SJsuK8zHg9a
      rA81m7lk4EoEYRUxClh2jEK8XdFdxBXTrRJDgKGkBCU5EppyxHJUNikoKUktjJiJDj8rc9Qc
      KwG8LsZatgebZPl9SiojUG+/RikGXJpc9wjIqSnHjIJaADMK6mFAPY6pBLNIDhc2HKmAWhi/
      8O+TrimFENTCmA/qMR/Uny4kPhpsMbASgSUUu4JTlFRArBSRqhBJhXPuxHcRT7QArHO0hzsM
      0nvEqr+3yWECE1LPUWzKGSJtschyKnIsxwHnarMvPMxir5wnZIumEIJ6XKIeH7zP4lkmMfP3
      rjmRAnDO0c/6tAb3iOXOnuNPwq51BufsaLCWUZEZ80qzVJKs1OPRIsvz/XLPyeTECSDJU3YG
      DxBuk7Kyhx4nF9F/Gc4OicmZCSyRoFialxAKRyQhloqyUkRKMBPGlILyse2/et6cYykA64qg
      rlSnZCZBmyHGDjB2gCQhVvql6TqtM5g8QbqEqtTUA8tiJFiMQxbiEuWgcqjgq7cVpOU5Powl
      gKTfYWgDIpvw4PEm5yacFmV78IidwTbWDnBugHBDFAkloZlTlnoI81HwnZXAZxsAAUgMi3HE
      TFg+1KyIZ3oZOxhuR8fQb6JKdUqR2jf3++YDojN8xZzapF6S1BTMxzG1IKYU1Mays3t4x/7n
      r8ukBnrezvG0M9ameJN0ub3R4cq5FfLBJnc3FFcvLkxsem744D/hTOeN7TwrAG/H23kRY7QA
      jofrj+j3czYjwdb2Dpc/vI4aRYS9rVig1+G4xbp4O8fLTrEnPCXp2/GOSLpw5RoXRs+WV86+
      Xik9niOkiDDWWJNjckfSjxh05hj0rpIP3rMtkZ7po8jGZ7DGYHKNyQV5FqKziDyLydMYravo
      vILRJUQOVQVLJcn8cskLwHP8eVqLa0zu0Kkkz8KnDp5X0bpGnsVgFBhBgCtC2BVUpCAOJeUZ
      RbkcotTTbZ9eAEfE07mG3c07jv0vASBGAbBCwgFRoIf7HPtMLMjuLN13y+KOwWp2UXtbnNHo
      3GK1w2jQuUJnMTqP0DrA6BI6K6HzMlZHOK2QrtjWGUmoKEEcSKIYSnFAGAUESiLkq6/PC+A1
      2AtHthar8+LeOKwBayTGBFijRvcSoyOcDXBOYW3xmrMB1kqcC3Cu2GkjRYoMMlSQo1Re3Ac5
      KtAEYQ7C4KzCml07u4+Le+cirBE4t3uT4J4+x0kcEoSmVO4RlQaUyn2isiGIQ4QKeF3hvfS7
      GtXgJs/RGeRpSJaWydOYPK+QpzM4F2J1cU3COALnCBREo8jSOJBEoSCuKcJQEQTqO8f2whFs
      iZxG3N6Pl6ITR5qUydMyaVIlz6qYvDpyRImzEqxDOkcgQUlBGEiwFiUgEKLYdCNBCvH0XhWH
      j2vt0JkjTxzaOvQoDHr3scEVOSPk7uad0WOKjTxKjmwVBd9z5P2bfoSAXFuy9in6DcuWBUJL
      WBoQxW2i8oC43CeMUpyVz4hJ4ShEi5MYnQNyJC6Ke3bFVtwbG41q8wo6K2PyEGUtoYRYCaqB
      KGpyJYnKiihUBKHam11827zXAnDO4myO1RqjLTpT6DxGZwFa13jRtsbCcQTGGEymyNIaeVrF
      5REBjlhBSQlmFZTj4scKlCQIitz+z/54x3m60FnHcJgxGEYMerMMW46OgdxBsWNOIEZi2hMR
      hZAKsQkETxdD9/9dUAizEoiiJp8JKMUBQfjdzTd+Q8wIozNs1scZhzECq0fdCb3bnYiwLmS/
      4wqeWccTFPt8c0meRuRZGZvHOBMjkQQCAikInvH953vNIJyjEkoWAkG5HlAqhXvO/a77z5NC
      SEGlGlOpFvsQnq7sP/O+Ay536vYDdHcapKJELbTcXW9w9eoVgkMMNA7Lw6+uknYSnA2RiL2b
      EqLoQihB8Fyyd/FcRS61KaI8A0lYUUSRKmpnKUY12dvbZH3S2es2HeIrmrr9ADpP2R5mtNI+
      l9cWuPdwm0tr8xNLj3Flbh5KKVIIxMhZnx3oHAbnXn7A9eF/ODehH9nbOa52xqreZmfrb5KM
      7JWEgSSKgr1B0Os4v8czDmPFAq2vPyYZai6eX+X2gwZXP7iClGJifUE7oblp57wdb+dwjBUL
      dP7Kh3vPPpp9NykRPZ5JMl0jPI/nGbwAPFONF4BnqjlWC2Eez9vmaWySwebaC8Dz/vHUyS0m
      z8izlKEubonJSK0mxZAL5wXg2bcwOIr/2YuDEEV89rvIIj16MLqzYOwoGfDIuUdHIu3mYnXO
      keUpQ5MVjm5zhlaTSYcR4HbXlCT7Ov7CC+B95TsrosZidIbJM1KdMTT56CA9g3amOL9sdLaX
      dgYzioaKhSJWESUVFjcZEUYxQRghRlmHn115PUgs33mPtVitsTpH65zM5CRWPy2PNehRObQz
      RZlw2CLgdHRzjAJQQRTRYE4U+aSklKMovNHtFUu3ryWAR/fv0B6knJ9wXiDPK9g9Qcda3DM3
      a0fOMjr8IzUpicmLxxgy4TBK4IR4PsbpBVMhfQwwBDssUlM7hxxCYBwRkhCJkhKJRAqBFLKI
      39p9LCTgyIwms5rU5uRYcuEwQmAl8Gx5Djx75KDsTwd/P+PyWt4rpcDqlCTVlAIxsSOShLOT
      OXLHFntE9zeX7DWXo5Tfo7872NeMjmqXUZNqcC+MCnOjWlI6RgF7xQYNiURKiVDFSY9Cyqef
      Y4sDKuyu045qXbtbyxmzr1bedWiLcRrtLPmobMWRdKNaUVA4tdgt1zPsT9ax7/t43e/ZAlpB
      gsU5890a/9kdbvvZrZX3v7n48icWS/aWj0h6ShSXqVUGdLsJi7NFJuFJpEWxu0d0OlfUcruj
      dVPUcNYacmcxVj9tLvffnBk5yujMKIr+H4wqsN1mdOQ4z/Ls77bXpL6MfcIXgHCj7HSueCxH
      r+024btOe6DD7nem3Zpw38db++LyiGfuX8Zx3p9w1HZeSwD1+QXCco1atfI6//5Cbm/eIet1
      GZ3Whdmt7cRTB3K7uy3280zt8vSLeMPB22Fatf0Z6HgqLLPvLdMYVn1SeC0BqI/U/DUAAAX9
      SURBVCBkpjb50463RU4W7HcdHw3qebv4askz1XgBeKYaLwDPVOMF4JlqXksA25uP+Oyzz+hl
      5tVv9niOMa8ngM6A7316mY0HjUmXx+M5Ul5LANJqHj18TDQz3sktHs9x47XWAS5ducpWu8vi
      fHXS5fF4jpSxjkg6CGPMxFY6129+jk7TN7bzPhzd4+0cjZ03FgAUIphELJC34+0ctZ2JTINO
      Ks7F2/F2jtrORD5ZCIHRGcM0x+Qpm81twNHYeEKaG3qdFq1O77n/01lCkmnydEhjqwU4Njc2
      MNbR77ToDZJDfX6aDMiNI+l32Wn3cFazsdnAOkdru3FoOzodkuaWLBnQ3G6Ds3vlwRk63f6h
      7CTDAdo6Br0OrU4fZ3I2Nps45+i2t+n0h4eykycDMm1Jh322Wh1whs3NzdF1NQ95XY7t5iaD
      JCPpd2l3B2ANm40tnHNsNxtk+jDT2Y72TpNuf0iWDNhudcFZGo3GXnm6/cOVZ2tzg2GaM+h1
      6PSGOJPTaG4X15wOGKb5q61Yw8aTJ2Ta0mltM0hydDZku9UB59hqbJDm+pV2JtIFAnh46wt6
      ah6RtKiXJdtdg5qZJ+vtYHMNOD794Q++ExJ+78tfkdUvY9qPqUSCra5lZfU029s7uMyAhOuf
      fPxSlTqj+eK3v2Dxg3/I9oNbOKMRUcTibIlOGlKvhmxsNvnepx+/tPzOOe7e+Dl26fvkzXtE
      ytFNYWlpgVY3o6oyGl3Nj75//eV2TM5vf/1LLlz/MY/v38VkKWE5ZqEW0uoLuv0uFy9e4tT8
      7CvKY7n12d8RrP0Bw42bBDgSJzmzWGe73SfPLc5qvv/9T18aMqizIdvtPpubG8jRlqowVsxU
      Q1odg6pU0cmQ69euvrQ81mgaW1tsbDSJ1GgPRKgoVcoMc8VMJWRzo8H3vvfJS+3opM92L2Fz
      Y2MvdDwIBdVyiKis0Hvye0z5MtevnHmpnUGvTX84YLPRRgiFcwaFQUlJEAX0U8fFixeoleOX
      2pnYSvDK2VWUhLmZCq1ej+HQMmg3CcOwOGDCuueii8+uriGFYLZaptXpEpdKbDW3SYZd4lKd
      ahTxqu0NQgWsnl0GJJVY0dluU52tst1ukyQ5vdY2K2vnX1l+IQSra2sIoFaJaXe6lCoVtrd3
      6Lca3H6wwVazUbQGLy1PyOrKEghFOYTOdptavcZOp8v2xgbl2hxPHq0fojyStdVVAKrliHa7
      Q6VaZXtnh+EgIU+HINTBm0/2oYKI1tYmq+fXiOIas6WYVAQsrSzRabQ4deYM4SG8QEjJoNNi
      ZW2NICwxX6vSyx1nVpZAa/rtbZYP8T2rKGZn8wnnLq4SxzPU4ggtQ5aWTvH4mxts9Q3NreYr
      7URhSLPRYm31FLWZBUphQBDGLM7UaG63mZufZX398SvtTEgAjgcPHrLT3ESGJTRlrn6wQhgo
      4lKZcikmLpWfqaks9x8+ZqfxmCCKUaVZLp47g3SGC5eug22Rq4hXDWmMznj4ZIvmxmPiUsz8
      6ioLlQrWBqwt1djpDun3nu9+PXcFznLv4QY7m4+I4ph4ZoG15QVwjsvXPuHP/+xP+fjaVdQr
      EvaaLOHxxhabGxvEccTp8+epxzHGRvzgJz9EpF2qM69OK+ms5t56g+3NdeK4RHXhDEsLszgr
      uHT5AqUopFQuvdJO0tmimxj6vYxQJnSdZHWuyo0bd7j+409Y//YrSjPzr7Rjsj5brT793oBy
      JNjop1xeOcVXn3/DbL3MTntAv//q73mws0lPQ7+Xo+gzEIql2TJffvOQ6z/5CX/04x9y+cLq
      K+1sbz4hd5CZgGHnMSKuUIkVj9oDrn94mVajSX3u1dc1sS6Qx3MS8cFwnqnGC8Az1XgBeKYa
      n9TH8855+M2vaZh5tp485A9/9AlGxOhhh6g6h3Qai2D2LQVe+kGw553jrOG//Md/z1/+m3/H
      f/vP/4Ggvsq50xXuNQaU9A4//vN/wbVLa2/ls30XyPPOEVJxeu0yy/Uyi6dP86MffZ+NjmV+
      psLC8vm35vzgWwDPlONbAM9U8/8Bp8c1+ld4u1wAAAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
