<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20224.22.1117.1841                               -->
<workbook original-version='18.1' source-build='2022.4.0 (20224.22.1117.1841)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SheetIdentifierTracking />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource caption='Sheet1 (df3)' inline='true' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='df3' name='excel-direct.0dfmg0a1dyyeqk15cx9jc11svdhr'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/migue/Documents/GitHub/IronMiguel/IH_lectures/MidTerm_Project/df3.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.0dfmg0a1dyyeqk15cx9jc11svdhr' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:L10001:no:A1:L2147483647:0' header='yes' outcome='6'>
            <column datatype='integer' name='F1' ordinal='0' />
            <column datatype='string' name='Country' ordinal='1' />
            <column datatype='string' name='Energy_type' ordinal='2' />
            <column datatype='integer' date-parse-format='yyyy' name='Year' ordinal='3' />
            <column datatype='real' name='Energy_consumption' ordinal='4' />
            <column datatype='real' name='Energy_production' ordinal='5' />
            <column datatype='real' name='GDP' ordinal='6' />
            <column datatype='real' name='Population' ordinal='7' />
            <column datatype='real' name='Energy_intensity_per_capita' ordinal='8' />
            <column datatype='real' name='Energy_intensity_by_GDP' ordinal='9' />
            <column datatype='real' name='CO2_emission' ordinal='10' />
            <column datatype='string' name='Region' ordinal='11' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='excel-direct.0dfmg0a1dyyeqk15cx9jc11svdhr' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:L10001:no:A1:L2147483647:0' header='yes' outcome='6'>
            <column datatype='integer' name='F1' ordinal='0' />
            <column datatype='string' name='Country' ordinal='1' />
            <column datatype='string' name='Energy_type' ordinal='2' />
            <column datatype='integer' date-parse-format='yyyy' name='Year' ordinal='3' />
            <column datatype='real' name='Energy_consumption' ordinal='4' />
            <column datatype='real' name='Energy_production' ordinal='5' />
            <column datatype='real' name='GDP' ordinal='6' />
            <column datatype='real' name='Population' ordinal='7' />
            <column datatype='real' name='Energy_intensity_per_capita' ordinal='8' />
            <column datatype='real' name='Energy_intensity_by_GDP' ordinal='9' />
            <column datatype='real' name='CO2_emission' ordinal='10' />
            <column datatype='string' name='Region' ordinal='11' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LES_RES_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Energy_type</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Energy_type]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Energy_type</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LES_RES_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Year]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Year</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Energy_consumption</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Energy_consumption]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Energy_consumption</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Energy_production</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Energy_production]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Energy_production</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GDP</remote-name>
            <remote-type>5</remote-type>
            <local-name>[GDP]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>GDP</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Population]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Population</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Energy_intensity_per_capita</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Energy_intensity_per_capita]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Energy_intensity_per_capita</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Energy_intensity_by_GDP</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Energy_intensity_by_GDP]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Energy_intensity_by_GDP</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CO2_emission</remote-name>
            <remote-type>5</remote-type>
            <local-name>[CO2_emission]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>CO2_emission</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Region</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Region]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Region</remote-alias>
            <ordinal>11</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LES_RES_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>5</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:L10001:no:A1:L2147483647:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='CO2 emission' datatype='real' name='[CO2_emission]' role='measure' type='quantitative' />
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Energy consumption' datatype='real' name='[Energy_consumption]' role='measure' type='quantitative' />
      <column caption='Energy intensity by GDP' datatype='real' name='[Energy_intensity_by_GDP]' role='measure' type='quantitative' />
      <column caption='Energy intensity per capita' datatype='real' name='[Energy_intensity_per_capita]' role='measure' type='quantitative' />
      <column caption='Energy production' datatype='real' name='[Energy_production]' role='measure' type='quantitative' />
      <column caption='Energy type' datatype='string' name='[Energy_type]' role='dimension' type='nominal' />
      <column datatype='integer' hidden='true' name='[F1]' role='measure' type='quantitative' />
      <column datatype='string' name='[Region]' role='dimension' type='nominal' />
      <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='Sheet1' datatype='table' name='[__tableau_internal_object_id__].[Sheet1_418B5E1974044438ADF937532E3FD955]' role='measure' type='quantitative' />
      <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
      <column-instance column='[Energy_type]' derivation='None' name='[none:Energy_type:nk]' pivot='key' type='nominal' />
      <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
      <column-instance column='[Energy_production]' derivation='Sum' name='[pcto:sum:Energy_production:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[Energy_consumption]' derivation='Sum' name='[sum:Energy_consumption:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Energy_production]' derivation='Sum' name='[sum:Energy_production:qk]' pivot='key' type='quantitative' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_consumption:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[pcto:sum:Energy_production:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_production:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Region:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Africa&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Eastern Europe&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;Western Europe&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Oceania&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;World&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Asia&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Latin America&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Arab contries&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;USA and territories&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Guadeloupe&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Burma&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;North Korea&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;British Virgin Islands&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Côte d’Ivoire&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Reunion&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;The Bahamas&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Gambia, The&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Macau&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Guam&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Martinique&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Timor-Leste&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Congo-Brazzaville&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Palestinian Territories&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;World&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Cabo Verde&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Northern Mariana Islands&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Saint Vincent/Grenadines&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;American Samoa&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Congo-Kinshasa&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Puerto Rico&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Energy_type:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;all_energy_types&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;petroleum_n_other_liquids&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;nuclear&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;natural_gas&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;renewables_n_other&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;coal&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;España&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Sheet1' id='Sheet1_418B5E1974044438ADF937532E3FD955'>
            <properties context=''>
              <relation connection='excel-direct.0dfmg0a1dyyeqk15cx9jc11svdhr' name='Sheet1' table='[Sheet1$]' type='table'>
                <columns gridOrigin='A1:L10001:no:A1:L2147483647:0' header='yes' outcome='6'>
                  <column datatype='integer' name='F1' ordinal='0' />
                  <column datatype='string' name='Country' ordinal='1' />
                  <column datatype='string' name='Energy_type' ordinal='2' />
                  <column datatype='integer' date-parse-format='yyyy' name='Year' ordinal='3' />
                  <column datatype='real' name='Energy_consumption' ordinal='4' />
                  <column datatype='real' name='Energy_production' ordinal='5' />
                  <column datatype='real' name='GDP' ordinal='6' />
                  <column datatype='real' name='Population' ordinal='7' />
                  <column datatype='real' name='Energy_intensity_per_capita' ordinal='8' />
                  <column datatype='real' name='Energy_intensity_by_GDP' ordinal='9' />
                  <column datatype='real' name='CO2_emission' ordinal='10' />
                  <column datatype='string' name='Region' ordinal='11' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='CO2 Emissions/GDP'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (df3)' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' />
          </datasources>
          <datasource-dependencies datasource='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx'>
            <column caption='CO2 emission' datatype='real' name='[CO2_emission]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Energy type' datatype='string' name='[Energy_type]' role='dimension' type='nominal' />
            <column datatype='real' name='[GDP]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Energy_type]' derivation='None' name='[none:Energy_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CO2_emission]' derivation='Sum' name='[sum:CO2_emission:qk]' pivot='key' type='quantitative' />
            <column-instance column='[GDP]' derivation='Sum' name='[sum:GDP:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Country:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Country:nk]' member='&quot;China&quot;' />
                <groupfilter function='member' level='[none:Country:nk]' member='&quot;United States&quot;' />
                <groupfilter function='member' level='[none:Country:nk]' member='&quot;World&quot;' />
                <groupfilter function='member' level='[none:Country:nk]' member='%null%' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]'>
            <groupfilter function='member' level='[none:Energy_type:nk]' member='&quot;all_energy_types&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</column>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]</column>
          </slices>
          <aggregation value='false' />
        </view>
        <style />
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:GDP:qk]' />
              <lod column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' />
              <lod column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:CO2_emission:qk]</rows>
        <cols>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:GDP:qk]</cols>
      </table>
      <simple-id uuid='{0F8B9CD3-43F6-4D58-BDCE-91CCB5461DD8}' />
    </worksheet>
    <worksheet name='CO2 emission/energy type'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (df3)' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' />
          </datasources>
          <datasource-dependencies datasource='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx'>
            <column caption='CO2 emission' datatype='real' name='[CO2_emission]' role='measure' type='quantitative' />
            <column caption='Energy type' datatype='string' name='[Energy_type]' role='dimension' type='nominal' />
            <column-instance column='[Energy_type]' derivation='None' name='[none:Energy_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[CO2_emission]' derivation='Sum' name='[sum:CO2_emission:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Energy_type:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Energy_type:nk]' member='&quot;all_energy_types&quot;' />
                <groupfilter function='member' level='[none:Energy_type:nk]' member='%null%' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:CO2_emission:qk]</rows>
        <cols>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]</cols>
      </table>
      <simple-id uuid='{F07FC092-7535-46A0-A6BD-AD42CF66EB3E}' />
    </worksheet>
    <worksheet name='CO2 emissions/Country'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (df3)' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' />
          </datasources>
          <datasource-dependencies datasource='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx'>
            <column caption='CO2 emission' datatype='real' name='[CO2_emission]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[CO2_emission]' derivation='Sum' name='[sum:CO2_emission:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Country:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Country:nk]' member='&quot;World&quot;' />
                <groupfilter function='member' level='[none:Country:nk]' member='%null%' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]'>
            <groupfilter from='1993' function='range' level='[none:Year:ok]' to='2019' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:CO2_emission:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]</column>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' />
              <lod column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:CO2_emission:qk]</rows>
        <cols>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</cols>
        <pages>
          <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]</column>
        </pages>
      </table>
      <simple-id uuid='{EB0DF92E-F8D2-4597-B292-A6FEBBCA833D}' />
    </worksheet>
    <worksheet name='Consumption per country'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (df3)' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' />
          </datasources>
          <datasource-dependencies datasource='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Energy consumption' datatype='real' name='[Energy_consumption]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Energy_consumption]' derivation='Sum' name='[sum:Energy_consumption:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Brazil&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Russia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United States&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]' included-values='in-range'>
            <min>1993</min>
            <max>2019</max>
          </filter>
          <slices>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</column>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' />
              <lod column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_consumption:qk]</rows>
        <cols>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</cols>
      </table>
      <simple-id uuid='{46566CBA-A548-4BBD-83BF-D000F6F8A235}' />
    </worksheet>
    <worksheet name='Energy production per energy type'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (df3)' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' />
          </datasources>
          <datasource-dependencies datasource='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx'>
            <column caption='Energy production' datatype='real' name='[Energy_production]' role='measure' type='quantitative' />
            <column caption='Energy type' datatype='string' name='[Energy_type]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Energy_type]' derivation='None' name='[none:Energy_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Energy_production]' derivation='Sum' name='[sum:Energy_production:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Energy_type:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Energy_type:nk]' member='&quot;all_energy_types&quot;' />
                <groupfilter function='member' level='[none:Energy_type:nk]' member='%null%' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]'>
            <groupfilter from='1992' function='range' level='[none:Year:ok]' to='2019' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_production:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]</column>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]</column>
          </slices>
          <aggregation value='false' />
        </view>
        <style>
          <style-rule element='map'>
            <format attr='washout' value='0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]</rows>
        <cols>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_production:qk]</cols>
        <pages>
          <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]</column>
        </pages>
        <page-trail-options enabled='true' trail-effect='none' />
      </table>
      <simple-id uuid='{D5D3E132-0240-4D22-80BC-DBA1AF8AC903}' />
    </worksheet>
    <worksheet name='Hoja 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (df3)' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[GDP]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[GDP]' derivation='Sum' name='[sum:GDP:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Country:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Country:nk]' member='&quot;World&quot;' />
                <groupfilter function='member' level='[none:Country:nk]' member='%null%' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]'>
            <groupfilter from='1992' function='range' level='[none:Year:ok]' to='2019' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]</column>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</column>
          </slices>
          <aggregation value='false' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:GDP:qk]' palette='red_green_white_diverging_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:GDP:qk]' />
              <color column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:GDP:qk]' />
              <lod column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' />
              <geometry column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[Latitude (generated)]</rows>
        <cols>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[Longitude (generated)]</cols>
        <pages>
          <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]</column>
        </pages>
        <page-trail-options enabled='true' />
      </table>
      <simple-id uuid='{32802CA9-DD56-4632-95E7-7579DFA079DA}' />
    </worksheet>
    <worksheet name='Production per country'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (df3)' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' />
          </datasources>
          <datasource-dependencies datasource='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Energy production' datatype='real' name='[Energy_production]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Energy_production]' derivation='Sum' name='[sum:Energy_production:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Brazil&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Russia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United States&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]' included-values='in-range'>
            <min>1993</min>
            <max>2019</max>
          </filter>
          <slices>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</column>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' />
              <lod column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_production:qk]</rows>
        <cols>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</cols>
      </table>
      <simple-id uuid='{28387289-F0DF-4C73-9B55-898543AEC5FC}' />
    </worksheet>
    <worksheet name='Production per region'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (df3)' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' />
          </datasources>
          <datasource-dependencies datasource='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx'>
            <column caption='Energy production' datatype='real' name='[Energy_production]' role='measure' type='quantitative' />
            <column datatype='string' name='[Region]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Energy_production]' derivation='Sum' name='[sum:Energy_production:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Region:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Region:nk]' member='&quot;World&quot;' />
                <groupfilter function='member' level='[none:Region:nk]' member='%null%' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Area' />
            <encodings>
              <color column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_production:qk]</rows>
        <cols>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</cols>
      </table>
      <simple-id uuid='{2277F14A-7015-419F-A9B4-AA80A9A79243}' />
    </worksheet>
    <worksheet name='Renewable per region'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (df3)' name='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx' />
          </datasources>
          <datasource-dependencies datasource='federated.0n2qrqi0xm4lmh10hysyr0wj1hwx'>
            <column caption='Energy production' datatype='real' name='[Energy_production]' role='measure' type='quantitative' />
            <column caption='Energy type' datatype='string' name='[Energy_type]' role='dimension' type='nominal' />
            <column datatype='string' name='[Region]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Energy_type]' derivation='None' name='[none:Energy_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Energy_production]' derivation='Sum' name='[sum:Energy_production:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]'>
            <groupfilter function='member' level='[none:Energy_type:nk]' member='&quot;renewables_n_other&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Region:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:Region:nk]' member='&quot;World&quot;' />
                <groupfilter function='member' level='[none:Region:nk]' member='%null%' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]</column>
            <column>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Area' />
            <encodings>
              <color column='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_production:qk]</rows>
        <cols>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</cols>
      </table>
      <simple-id uuid='{F38DB2FF-4F00-4779-B1F9-846225E7BF67}' />
    </worksheet>
  </worksheets>
  <windows saved-dpi-scale-factor='1.25' source-height='37'>
    <window class='worksheet' name='Hoja 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='174'>
            <card pane-specification-id='1' param='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:GDP:qk]' type='color' />
            <card type='currpage' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>2019</bucket>
          </multibucket>
        </current-page>
        <highlight>
          <color-one-way>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:GDP:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{6F3C1735-6DD1-459B-815B-EA3526CB9C49}' />
    </window>
    <window class='worksheet' maximized='true' name='Energy production per energy type'>
      <cards>
        <edge name='left'>
          <strip size='174'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='174'>
            <card looped='1' type='currpage' />
            <card pane-specification-id='0' param='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>1993</bucket>
          </multibucket>
        </current-page>
        <highlight>
          <color-one-way>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:ok]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[sum:Energy_production:qk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{4AFE2931-ADAE-41AD-BE1B-5222FEEA274D}' />
    </window>
    <window class='worksheet' name='Renewable per region'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='174'>
            <card pane-specification-id='0' param='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{BC171670-06A6-4ECF-9830-D9A8C80DEA3F}' />
    </window>
    <window class='worksheet' name='Production per region'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='174'>
            <card pane-specification-id='0' param='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>&quot;Western Europe&quot;</bucket>
          </multibucket>
        </current-page>
        <highlight>
          <color-one-way>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{4A320D6F-19DC-4DA0-B355-CB80E65DEA4C}' />
    </window>
    <window class='worksheet' name='Consumption per country'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='174'>
            <card pane-specification-id='0' param='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{9E37EC6C-0134-4EDB-96AF-949A5DD83E40}' />
    </window>
    <window class='worksheet' name='Production per country'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='173'>
            <card pane-specification-id='0' param='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Region:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C0627554-4543-42A1-A98A-B1A249043E13}' />
    </window>
    <window class='worksheet' name='CO2 Emissions/GDP'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{D2A92961-D36D-43D3-B236-10B4D86656D2}' />
    </window>
    <window class='worksheet' name='CO2 emissions/Country'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='174'>
            <card type='currpage' />
            <card pane-specification-id='0' param='[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>2019</bucket>
          </multibucket>
        </current-page>
        <highlight>
          <color-one-way>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Country:nk]</field>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{0353DF80-0414-48A7-A5FE-08B6F8068261}' />
    </window>
    <window class='worksheet' name='CO2 emission/energy type'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0n2qrqi0xm4lmh10hysyr0wj1hwx].[none:Energy_type:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{4D0D9565-A089-40AB-8465-17BAA3869D58}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='CO2 Emissions/GDP' width='192'>
      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
      7QAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='CO2 emission/energy type' width='192'>
      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
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='CO2 emissions/Country' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Consumption per country' width='192'>
      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
      nLwJlHOm+f8BsVD4sJEUnAwAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='187' name='Energy production per energy type' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAAC7CAYAAAAzOZEFAAAACXBIWXMAABJ0AAASdAHeZh94
      AAAX/klEQVR4nO3de1SU953H8XcdIUPwAgRckEiA4MpFFEWwGGyoeshijHIwxYbIlkTjEG1L
      YkKbjRspHHvaXWuNLa4SRTF0UaPmaFzD4qkbjUSLhkgCAm4QxltgvY1CgenQMfvHzHCR2whM
      AJ/v6y/O8MxvfjPzfOb5PZfv8/vet99++y1CKNSIwe6AEINJAiAUTQIgFE0CIBRNAiAUTQIg
      FE0CIBRNAiAUTQIgFE0CIBRNAiAUTQIgFE0CIBRNAiAUTQIgFE0CIBRNAiAUTQIgFE0CIBRN
      AiAUTQIgFE0CIBRNAiAUTQIgFE0CIBRNAiAUTQIgFE0CIIa0pqYmm7YvARCKJgEQijZysDsg
      RG8S3o+1WduyBRCK9lAHoCRbQ3bJYPdiGKnLJ0NhH9jQCEBdPhkZ+dQNdj+UoiQbjcJW9O4M
      jQAIMUj6uRNcR37GQb4X40z5wUIu3DRg7zqF+S8lEePn2LZYYxX5ObsoOH+dZhyYMD2el1+a
      xXiVaZiy5YxpsTTNQdMfnrGkr43BnRKyM2p5dm00I0/nsDHvDI/MT2dtjDvQSFV+DrsKznO9
      2dj163bS/jngMGE68S+/xKzxKtO/S7LRFIeStSyk3VvMJ+M9WLE2BnfzMhmXZhBT/zF7z2hp
      MNjjGrmMXy56lM9yc83v0Ymg+BRWRY1HZfVHmU/GEVeSp1Tzp49OU3W9GZyCiE9ZRdR4q1sB
      jNwszmPb7jNoGwyoHCYQkZhMQqgrKurIz0jj4DWAM2jMnzvhr7Z7zy1cP7u3hz50bN/edRJz
      X9QQG2j53Hv6zoaeATgKVEXlN4m88M7zeKjvoas4zJZNO3H67U+JcASo42jmAZoXrmb9Kmfs
      WnRUHN7CptzRpCcFE7Isi6xn71vJ7qMryuKDIh+WZmQS4GwHQN3RTWy7MI2ktBUEOI9Arz3O
      1swNGFevYUE3K0zd0UwONC9k9fpVONu1mPuay+j0JILV1r/julNHqX4+kfQfP44jVzj0m3Ws
      2RjJkkTTexxRX8iWNUcpj0oi+EE+yuL97Br1HItXr8fXeQT1Z7NJyzvJtDejGGtlE/rSXNYf
      guffWM90DzX3dCXs2/hbsklnRag7MWuziOkq6Fb2QV+ay+YiP1asS8BDDfra0+x4dxNHX3+b
      6HZfXlff2VA0AEOgAKIWTcVDrQLscA6IY+m8Oj47e9f075pTVAQlEhfgjB2AnTMBcUnM1p7g
      nN6K5nXH+KBiFm++FtPug6zkf446EZdseUyF2nsuyT9ypSC/FGOXDdVwqiKIxLgATM2Y+po0
      W8sJqzrSxj0qkSVhj+NoB9hN4AlPCFmUSKSv6T2qxvjxpJuxm370IPQFUpdE4mt+T2PCwpnc
      1Eyz1Q3c5S8FVcxankSYhxoVYOccQsLy2Vw+8ql1+1g99kHPuRMGFmgizd+3CrVHJJp4Vz45
      VdPWRpff2dBkk/MAXk/4cK28FhjL3UvVlB8uQHP4/qU8ib0DXf7kt6eeyYuJIXQY2Ny4jHaM
      D3Pu+9VW+wfyREEtNwjp3OzdS1SXH6agc0fwtKojw8FltNU+hHjd97DXJAJ1n1FHf9+llpqL
      xZxYqen8r/Dwtr+7+s6GKJudCFOrHwHAYDDgGduPMaDDKEY9yBC4OwYDhtZ9C9E3LRj+Fs6r
      WcvoYvDUZqC+s++ADY4CGSkvq2CCpwcAbl7e6L46z+2BfAk3L7zrL1LT2PFhfWU5lzw9cOvu
      ObqvOD+gHRlqvPD2raG65r7B1+ULlDuPH4Dge+HtW0ZZ+QMP7oasAQhAC40NetN4t0VHRf4f
      2XV5LrEzzOOTiRHMbjjA1g8r0LUAGNHfqqYw5yNKLU04ueB64xyfX2kxtajX9zJ+9mdOdD0H
      t+VToWsxtak9xtZ9N3kmJribIy8TiZjdwIGtH5qfA0b9LaoLc/jI0pGxzrhcu4RWbwSjnlvV
      heRuLxhG5yfG8v1n/CjamcvZWtNn2KIrIW/7Sbye/UFbAFxccasoprjeCBjR61usbj/sqSc5
      tSOLwlrLd97I1S8Psffk8PmU2huQo0Afb/hX9tQ2YFA5MC7oGV5JiaH1QIzKh0W/eA2H3FzS
      U67TbFThMM6PiIVLmWlpQj2D+KT/ZeuGFA43g8OkH7Fm9Q+7/iU3c49O4RVjDrvSU9oOgya/
      QUy3hwxV+Cz6Ba855JJrfo7KYRx+EQtZaumIzzMkTtrIu6s/phkHxvlFsPC5H1JzqP+f0ndF
      HZxIqiGPbRtS2d56GPQtloW2G5F7zSNpbg4716zkPYM9o+ck87slQVa17xih4Vcj95C9IZXc
      BgPYj8Z7agyL43v6tsxKstFsod0QynRY9mzY4B0m/d633377bd+fXkd+xhE81vYyJhSij5qa
      mli+P8Fm7cvVoDZWl59BmunMUzes2Kmk4wnDLskOfp/IFkAMaU1NTTz66KM2a7+fARDCtmwd
      ALkYTiiaBEAomgRAKJocBRJDXsPGyTZrW7YAQtEkAGIQ1ZGfkUH+IF5FIQEQiiYBEIomO8Gi
      B0bqSw+zfc8xLtw0X1iXtIrEEGcAGqvyydlVwPnrzRjtXZky/yWSYvxaC2GMN4vZ//5BTldd
      p9lIF/XDg08CILplrNxLxq47xL6xnhQPNfd01Zz835uAM9QdZdO2C0xLSmNFgDMj9FqOb81k
      g3E1axaYbgZwW3uNMXM1/Ppnj+NoZ0RfW8j2DbsoWreSmQ9Qg21LMgQS3dBz5s/lzFqlIbK1
      vtiXOTMnAlD5P0dxiksmxlzrrVJ7Mzf5R7gW5FNqLuZwm7GQmKnm2mlUqD2eJjLgOjeGUFGS
      bAFEN77mQrkPIT/tqr7iBpe1Y/DpXJRN4BMF1N6AEHegsYpju/eR/6WWBkPbYuGhwHgbdv0B
      SABEN+ywf6Q/z7/N8S3buDBdw5qf+GK5OURJtobigejeAJEhkOiGNz5PdlFfDIAbXt71XOxc
      lE35JU883AAuc7Epirg5bSv/UCQBEN1QEz4vkFOb2+p/WxqvUlj0NQD+c6KpP7iN/AodLYBR
      r+XY1n3cfCaGYJXp+Q715/hc2/bcs3t/z74hdktSGQKJbqn8l7B2xVFyM1PJvWnAfrQ34UuT
      iQRwjyblFSM5u9JJaT0MmswbMZbbQfqzKDmIrMxUDjcYW+vAY//6Dl8N6rvqSApixJDW1NSE
      MSu89wX7SIZAQtFkCyCGNCmJFMKGJABC0SQAQtEkAELR5DyAGPIu/9h2t0aULYBQNAmAQskc
      yiYSgEFVQrYmG1kPB48EQCia7AT3UUl2Bldn/xiHTw+YCz7sGT/nVd5cEmiuiTVys3g/7x80
      zbdrxB7XSXN5URNLoGPH26afaZuw13yr9DryTfPG0n7eiJJsDcWhWZhmN227M/fEqkNsySzg
      6+AVZC0LsWEtrvk9fWiaExr70Xj7T8Bl4hI05jlSG6uOsXtfPl9qGzCg6jwXs/Ebjm/dwsHz
      lslSgnjmJ73N72w7EoA+u0bB7k+ZH5vEupc8UN+7wqHf/J5DlRtJ8Ae4jfbaGOZqfs3PHnfE
      zqintnA7G3YVsW7lTNxj1pIVU0K2pphQK+YH6E5zzSEy/1PHnF/+ntc9TBVatqrFbSzJYf0H
      f+e510w1wqqWRsoOrOPDdiUD32hv4r/kX1j6xGOoVS3oKg7yx//4Lx5ftwgvoO7odj4dl0Da
      igCc7VpovFrOn2u+Ab+Jfe9YP0gA+syT+Zrlbb/QqgnMDHPmSOuUw24EBNqzOzeN7doG2ioC
      Hahk5gDNp/BXjOOW8cu0jo+6BQRivzuXtO0dSxEdKmFmn1+4hD0H/4GUf1vQVs1o54jrWIcO
      S/mG+PHF+++y37z1MfHkfN0ivNzBfdoPcdqYxa+rJhIWEk5YeDALZg9ehbwEwFZuH2fLtgtM
      16zhJ+YJtE07vQNZEDiKUZ1GDjYsRRyh6nmn0VjJ3vUFjEhYyW9TPFCrAMtwzsJ9Nj//t+/T
      eP0KF8u+Ij/zP/k//2TeXuLPYMRAdoJt5fJFmqLimNO68n9nL2yjUsSxODdfpEbfwyI3aqj6
      x/n8eKpl5e+OHY7jfJkyJ5ZVaSmElHxG5UB29QFIAGxF7UD9uc9NU67SQuPVs+z9/b77Dnm6
      4OpWQXFxPUbAqNdjmrDUCScXHVe0pnLDlsarfHlos5XlhLYqRfRh1g9uc2Drsdb3pKsu5L9P
      t7uxp4MDj1YUc9Yyde2tCo5t305Bu0VKP8riWMUt9KY5VtFVnKPS3hWX/navj2QIZCv+i0gO
      yiIz9TANRvOUq0tj+es77QsCvZiXNJecnWtY+Z4B+9FzSP7dEoJQEx63iC82r+WnO02liFNj
      FhMd/BVVvb+wzUoR3WPe4OX6P5CZ+gENBntcp8wnOnAcly0LjJ1N0uKLbEpPYXuzitHeU4lZ
      HM+8b/a0tuE7LYjyfe/y1h+v02y0Z7R3OC/8LAGvfvatr6QgRvRLXX4GO1Sv8na0FfME90FT
      UxM3X15uk7ZBtgDCPFl1zzO5vkrWshC+/vNe/s93HjPMhzgbrxbx4TGY9qZtVv7vgmwBhNU6
      neQa50dU/HKeCx5Dj/u8/SDTpApFk5pgIWxIAiAUTQIgFE2OAokh7/aZGJu1LVsAoWgSgK6U
      ZJPR29ydJdlolFhTWJdPxkP0viUAomsKCbgEQCha/3eCS7LJqH2WtdEjOZ2zkbwzjzA/3VzK
      11hFfs4uCs5fpxkHJkyP5+WXZmGpjqvLz+CIazJTqv/ER6eruN4MTkHxpKyKal0G402K87ax
      +4yp7LB9WSH602T+Sw3zNibgb1m8JJufbali3lu/Ic7H/KD+NJnptTz7mzh8eilVtLh39wL5
      mze39f3pZfz8+WDG9HDK03izmLxtuzmjbcBg78qkuS+iiQ1snTa0sXwvf9hRiLbBXE4Y/gKv
      JITiau1p1Lp8Mo64kjylmj99ZOo/TkHEp6wiavyDnIs1crM4j227z6BtME9/mphMQqgrqg6X
      RpyhrVrTdDmESQvXz+7toQ8d2+9ckllCdkYtz66NZuTpHDbmneGR+emsbV//+R0ZoKNAOoqy
      PqDIZykZmQHm69DrOJp5gOaFq1m/yhm7Fh0Vh7ewKXc06UnBrcUPxft3Meq5xaxe74vziHrO
      ZqeRd3Iab0aNBfSU5m6myG8F6xI8UKOn9vQO3t10lNffjsZdHchkz48orwF/88r+dfk1Zs32
      pKyyjjgf8weqraE2eDqmRXouVbT063p5Da4r3mL9KsfWKUD//b9+zrpF3Vy3qC8ld3MRfivW
      keChBn0tp3e8y6ajr/N2tDsYS9iz4waz3ljPLzzUoL/Fpc+L0d4G1we5lKZ4P7tGPcfi1evx
      dR5B/dls0vJOMu3NKMZa2YS+NJf1h+D5N9Yz3UPNPV0J+zb+lmzSWRHqTszaLGJKstEUh7Zb
      6a3vg740l81FfqxYl4DpozjNjnc3cfT1t4lut47rirL4oMiHpRmZBAzSPEoDMgTSHfuAillv
      8lpMQFsRRs0pKoISiTNPo4mdMwFxSczWnuBcu6KK0BdSWRJpLt5QjSEsfDJNzc2mf+rPccKw
      AE2kucBCpcYjUkO86yecqgEYi3+QA9WX7lpelPIqP2Y8N5lHz1fS+mh5Ob6BlppTN2YsjGHq
      446mfqnUeDwdScD1G7SfvdM94p8IMy+jUnsz95VY3I4Xdlu4oT93AsOCtilFVWoPIjXxuH5y
      ihqAlmaa7f4Bz3GW/z+Gb2Q0Mx70OrLQF0hdEomv6QNjTFg4k5uaaba6gbv8paCKWcuTCGud
      /jSEhOWzuXzkU3rZ9beiD3rOnTCwQBOJh+lLQ+0RiSbelU9MX5qJ7hgfVMzizddiBm3lhwHa
      AqhnvkhiSMfavLuXqik/XIDm8P1LexJ7B7Bma6et4WLxCVZqOv8r3DxpiLv/ZG4dKUcfFYG6
      rpJqv+nEjR3HNWMe5fooItR1VJa5Ezi/bYjQ8aKu1hbpcfZORz/+0fkv1N0F/y5+arU1Fyk+
      sZLOXQ0nHEA9jXmhR8l84x28gkIJmT2DmU9a5tD9Ll1GW+1DyP0bMq9JBOo+ow7rvpruaam5
      WMyJnr40APVMXkwMYbDnjB+QADiMGtXpakCDwYBnbD/HdS0G/tZh7NkFn0CCtZ9RaYzAp/IC
      zoHRgIqgKfUcqTQS4VPJ+Ucn84plbNPnWt17GO+peaSbqUNbDH8j/FXLLUu6osb/+TQ2LGig
      VvsVpWd2k7HTjgWvv8bs737oa0MtGP5mub1LDxxGMcpWl5A+AJsdBXLz8kb31Xn6NSm4lze+
      ZWWUdzVTZ6uJBAZUUP61nvKykQT6mz5Vd39/rpV/jb68DOO0KW3j477W6tZ9yRd/n4BnN5Xb
      Xt6+lJWV02NXAZV6NI/7P0XMP6eSHjuST85ZNegYQF54+3Yx/enlC5Q7j+/nr7+l/TLKev7S
      hgzbHQadGMHshgNs/bACXQuYakSrKcz5iFJr2xgbxlNPnmJHViG1piJSc33sXk62rjcq/AO9
      KS39mPK/TybQsoL6BOJXVcrH5fVMCWpXcWpVrS7ca26g0dLv2kKyNh7H8/l53ZbujQ17iidP
      7SCrsLa13rXx6pcc2nvSNK6uO8n7e89y1dQoRn0tn5+7gquLk7WfxgAZy/ef8aNoZy5nLdOf
      6krI234Sr2d/0BYAF1fcKooprjcCRvT6FqvbD3vqSU7taJtelZZGrn55iL0nv+uw98521wKp
      fFj0i9dwyM0lPcVyFzBTfepMqxtxJELzK0buyWZDai6mo4em+tj4djuP6sDJPJazm2ux6e2O
      hEwk0PMPbKmax1vtf9asqtV9jDG1+0lbrW19zfAXUkkI6WHE6hiB5lcj2ZO9gdTcBgzYt9bE
      ugG4BTB9zEFy0943H3ocR9Azr5DUnztV9ZE6OJFUQx7bNqSyvfUw6FssC233/rzmkTQ3h51r
      VvKewZ7Rc5L53ZIgq9p3jNDwq5F7yN6QSq7lkO/UGBbHD73KMSmIEUNaU1MT+rLFNmtfrgYd
      AtrfJ7RrVuxUYrr51ZYzPSzgGUv62pgBGOc/PGQLIIY0KYkUwoYkAELRJABC0SQAQtHkKJAY
      8n75350uKBswsgUQiiYBEL14uGeylAAIRZMACEWTneDhzIoa4br8DN5jRce6jE7lji1cKdzF
      rv1fcKXZiL3rFJ5bvoxon24u1Oul1rv3aVofuppgMWgGoEb49vFN/PspX1ambSLAeQT62jKK
      bjZAl9PW9V7rbe00rQ9NTbAYRP2uEa7h+J/VJKTEmVdCFWqPqTwd3M2ly1bUervNWEjMVEu5
      pwq1x9NEBlznRvvqqIepJlgMYze+ptL+SWZZWZxrVa13YxXHdu8j/8uO8xSHty+6fphqgsUw
      Zm+P/QNsL3qv9bZynuKHvSZYDBNjn8DXcJGaRusW773W21bzFNuGBOAh5+Tkgu6K1lSXba7N
      3dxh0mAfoubpydv0IRXt5vc9XXqj6wZ7rfW21TzFtiFDoIecOjyORV9sZu1Pd2Kw1OZGB/NV
      uwmHXaJSeMdxD++lp3ClGRzGBTH/5WVdN9hrrbft5im2BakIE0NaU1MT6Z8es1n7MgQSiiZb
      ADGkSU2wEDYkO8FiyGtqarJZ2xIAMeTJEEgIG5EACEWTAAhFkwAIRZPzAELRZAsgFE0CIBRN
      AiAUTQIgFE0CIBRNAiAUTa4FEsOL8SbFeVvJPX3FdFOuiESSE0Jx7WOBvZwHEMOIntKcf2WX
      cQlr/jkMZ3Scff/X7FX9hHXmm3I9KBkCieHj9md8XDWLVUlhpjtO2DkTlrSKWVUf81n3t6no
      kQRADBv6CxXcmT4Nn/bDHZUP06bfoeKCvk9tSgDEsHHnzm0ec3Hp9LiLy2PcvnOnT21KAMSw
      4uzU+Za/Y52c+9yeBEAMK7o7dzs9dveOrs/tSQDEsOHk5MKt2533dm/fvoWLk1Of2pQAiGFD
      PSkApy/OUWNs96CxhnNfOBEwqS8HQSUAYjhxeYr5fqfYnHPWfK9THWdzNnPKbz5Pdd43toqc
      CBPDi5wJFmLgyBBIKJoEQCiaBEAomgRAKJoEQCiaBEAomgRAKJoEQCiaBEAomgRAKJoEQCia
      BEAomgRAKJoEQCiaBEAomgRAKJoEQCiaBEAomgRAKJoEQCiaBEAomgRAKJoEQCiaBEAomgRA
      KJoEQCiaBEAomgRAKJoEQCiaBEAomgRAKJoEQCiaBEAomgRAKJoEQCja/wOW29pQspJfuQAA
      AABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Hoja 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Production per country' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Production per region' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Renewable per region' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
